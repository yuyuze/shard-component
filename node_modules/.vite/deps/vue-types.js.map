{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/registry.npmmirror.com+is-plain-object@5.0.0/node_modules/is-plain-object/dist/is-plain-object.mjs", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/config.ts", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/utils.ts", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/validators/native.ts", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/validators/custom.ts", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/validators/oneof.ts", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/validators/oneoftype.ts", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/validators/arrayof.ts", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/validators/instanceof.ts", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/validators/objectof.ts", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/validators/shape.ts", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/index.ts", "../../../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/src/sensibles.ts", "dep:vue-types"],
  "sourcesContent": ["/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport { isPlainObject };\n", "import { VueTypesConfig } from './types'\n\nexport const config: VueTypesConfig = {\n  silent: false,\n  logLevel: 'warn',\n}\n", "import { isPlainObject as _isPlainObject } from 'is-plain-object'\nimport { config } from './config'\nimport {\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueProp,\n  InferType,\n  PropOptions,\n} from './types'\n\nconst ObjProto = Object.prototype\nconst toString = ObjProto.toString\nexport const hasOwn = ObjProto.hasOwnProperty\n\nconst FN_MATCH_REGEXP = /^\\s*function (\\w+)/\n\n// https://github.com/vuejs/vue/blob/dev/src/core/util/props.js#L177\nexport function getType(\n  fn: VueProp<any> | (() => any) | (new (...args: any[]) => any),\n): string {\n  const type = (fn as VueProp<any>)?.type ?? fn\n  if (type) {\n    const match = type.toString().match(FN_MATCH_REGEXP)\n    return match ? match[1] : ''\n  }\n  return ''\n}\n\nexport function getNativeType(value: any): string {\n  if (value === null || value === undefined) return ''\n  const match = value.constructor.toString().match(FN_MATCH_REGEXP)\n  return match ? match[1] : ''\n}\n\ntype PlainObject = { [key: string]: any }\nexport const isPlainObject = _isPlainObject as (obj: any) => obj is PlainObject\n\n/**\n * No-op function\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\n/**\n * A function that returns its first argument\n *\n * @param arg - Any argument\n */\nexport const identity = (arg: any) => arg\n\nlet warn: (msg: string) => string | void = identity\n\nif (process.env.NODE_ENV !== 'production') {\n  const hasConsole = typeof console !== 'undefined'\n  warn = hasConsole\n    ? function warn(msg: string, level = config.logLevel) {\n        if (config.silent === false) {\n          console[level](`[VueTypes warn]: ${msg}`)\n        }\n      }\n    : identity\n}\n\nexport { warn }\n\n/**\n * Checks for a own property in an object\n *\n * @param {object} obj - Object\n * @param {string} prop - Property to check\n */\nexport const has = <T, U extends keyof T>(obj: T, prop: U) =>\n  hasOwn.call(obj, prop)\n\n/**\n * Determines whether the passed value is an integer. Uses `Number.isInteger` if available\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n * @param {*} value - The value to be tested for being an integer.\n * @returns {boolean}\n */\nexport const isInteger =\n  Number.isInteger ||\n  function isInteger(value: unknown): value is number {\n    return (\n      typeof value === 'number' &&\n      isFinite(value) &&\n      Math.floor(value) === value\n    )\n  }\n\n/**\n * Determines whether the passed value is an Array.\n *\n * @param {*} value - The value to be tested for being an array.\n * @returns {boolean}\n */\nexport const isArray =\n  Array.isArray ||\n  function isArray(value): value is any[] {\n    return toString.call(value) === '[object Array]'\n  }\n\n/**\n * Checks if a value is a function\n *\n * @param {any} value - Value to check\n * @returns {boolean}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isFunction = <T extends Function>(value: unknown): value is T =>\n  toString.call(value) === '[object Function]'\n\n/**\n * Checks if the passed-in value is a VueTypes type\n * @param value - The value to check\n */\nexport const isVueTypeDef = <T>(\n  value: any,\n): value is VueTypeDef<T> | VueTypeValidableDef<T> =>\n  isPlainObject(value) && has(value, '_vueTypes_name')\n\n/**\n * Checks if the passed-in value is a Vue prop definition object or a VueTypes type\n * @param value - The value to check\n */\nexport const isComplexType = <T>(value: any): value is VueProp<T> =>\n  isPlainObject(value) &&\n  (has(value, 'type') ||\n    ['_vueTypes_name', 'validator', 'default', 'required'].some((k) =>\n      has(value, k),\n    ))\n\nexport interface WrappedFn {\n  (...args: any[]): any\n  __original: (...args: any[]) => any\n}\n\n/**\n * Binds a function to a context and saves a reference to the original.\n *\n * @param fn - Target function\n * @param ctx - New function context\n */\nexport function bindTo(fn: (...args: any[]) => any, ctx: any): WrappedFn {\n  return Object.defineProperty(fn.bind(ctx) as WrappedFn, '__original', {\n    value: fn,\n  })\n}\n\n/**\n * Returns the original function bounded with `bindTo`. If the passed-in function\n * has not be bound, the function itself will be returned instead.\n *\n * @param fn - Function to unwrap\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function unwrap<T extends WrappedFn | Function>(fn: T) {\n  return (fn as WrappedFn).__original ?? fn\n}\n\n/**\n * Validates a given value against a prop type object.\n *\n * If `silent` is `false` (default) will return a boolean. If it is set to `true`\n * it will return `true` on success or a string error message on failure\n *\n * @param {Object|*} type - Type to use for validation. Either a type object or a constructor\n * @param {*} value - Value to check\n * @param {boolean} silent - Silence warnings\n */\nexport function validateType<T, U>(\n  type: T,\n  value: U,\n  silent = false,\n): string | boolean {\n  let typeToCheck: { [key: string]: any }\n  let valid = true\n  let expectedType = ''\n  if (!isPlainObject(type)) {\n    typeToCheck = { type }\n  } else {\n    typeToCheck = type\n  }\n  const namePrefix = isVueTypeDef(typeToCheck)\n    ? typeToCheck._vueTypes_name + ' - '\n    : ''\n\n  if (isComplexType(typeToCheck) && typeToCheck.type !== null) {\n    if (typeToCheck.type === undefined || typeToCheck.type === true) {\n      return valid\n    }\n    if (!typeToCheck.required && value === undefined) {\n      return valid\n    }\n    if (isArray(typeToCheck.type)) {\n      valid = typeToCheck.type.some(\n        (type: any) => validateType(type, value, true) === true,\n      )\n      expectedType = typeToCheck.type\n        .map((type: any) => getType(type))\n        .join(' or ')\n    } else {\n      expectedType = getType(typeToCheck)\n\n      if (expectedType === 'Array') {\n        valid = isArray(value)\n      } else if (expectedType === 'Object') {\n        valid = isPlainObject(value)\n      } else if (\n        expectedType === 'String' ||\n        expectedType === 'Number' ||\n        expectedType === 'Boolean' ||\n        expectedType === 'Function'\n      ) {\n        valid = getNativeType(value) === expectedType\n      } else {\n        valid = value instanceof typeToCheck.type\n      }\n    }\n  }\n\n  if (!valid) {\n    const msg = `${namePrefix}value \"${value}\" should be of type \"${expectedType}\"`\n    if (silent === false) {\n      warn(msg)\n      return false\n    }\n    return msg\n  }\n\n  if (has(typeToCheck, 'validator') && isFunction(typeToCheck.validator)) {\n    const oldWarn = warn\n    const warnLog: string[] = []\n    warn = (msg) => {\n      warnLog.push(msg)\n    }\n\n    valid = typeToCheck.validator(value)\n    warn = oldWarn\n\n    if (!valid) {\n      const msg = (warnLog.length > 1 ? '* ' : '') + warnLog.join('\\n* ')\n      warnLog.length = 0\n      if (silent === false) {\n        warn(msg)\n        return valid\n      }\n      return msg\n    }\n  }\n  return valid\n}\n\n/**\n * Adds `isRequired` and `def` modifiers to an object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toType<T = any>(name: string, obj: PropOptions<T>) {\n  const type: VueTypeDef<T> = Object.defineProperties(obj as VueTypeDef<T>, {\n    _vueTypes_name: {\n      value: name,\n      writable: true,\n    },\n    isRequired: {\n      get() {\n        this.required = true\n        return this\n      },\n    },\n    def: {\n      value(def?: any) {\n        if (def === undefined) {\n          if (has(this, 'default')) {\n            delete this.default\n          }\n          return this\n        }\n        if (!isFunction(def) && validateType(this, def, true) !== true) {\n          warn(`${this._vueTypes_name} - invalid default value: \"${def}\"`)\n          return this\n        }\n        if (isArray(def)) {\n          this.default = () => [...def]\n        } else if (isPlainObject(def)) {\n          this.default = () => Object.assign({}, def)\n        } else {\n          this.default = def\n        }\n        return this\n      },\n    },\n  })\n\n  const { validator } = type\n  if (isFunction(validator)) {\n    type.validator = bindTo(validator, type)\n  }\n\n  return type\n}\n\n/**\n * Like `toType` but also adds the `validate()` method to the type object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toValidableType<T = any>(name: string, obj: PropOptions<T>) {\n  const type = toType<T>(name, obj)\n  return Object.defineProperty(type, 'validate', {\n    value(fn: (value: T) => boolean) {\n      if (isFunction(this.validator)) {\n        warn(\n          `${\n            this._vueTypes_name\n          } - calling .validate() will overwrite the current custom validator function. Validator info:\\n${JSON.stringify(\n            this,\n          )}`,\n        )\n      }\n      this.validator = bindTo(fn, this)\n      return this\n    },\n  }) as VueTypeValidableDef<T>\n}\n\n/**\n *  Clones an object preserving all of it's own keys.\n *\n * @param obj - Object to clone\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function clone<T extends object>(obj: T): T {\n  const descriptors = {} as { [P in keyof T]: any }\n  Object.getOwnPropertyNames(obj).forEach((key) => {\n    descriptors[key as keyof T] = Object.getOwnPropertyDescriptor(obj, key)\n  })\n  return Object.defineProperties({}, descriptors) as T\n}\n\n/**\n * Return a new VueTypes type using another type as base.\n *\n * Properties in the `props` object will overwrite those defined in the source one\n * expect for the `validator` function. In that case both functions will be executed in series.\n *\n * @param name - Name of the new type\n * @param source - Source type\n * @param props - Custom type properties\n */\nexport function fromType<T extends VueTypeDef<any>>(name: string, source: T): T\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>,\n>(name: string, source: T, props: V): Omit<T, keyof V> & V\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>,\n>(name: string, source: T, props?: V) {\n  // 1. create an exact copy of the source type\n  const copy = clone(source)\n\n  // 2. give it a new name\n  copy._vueTypes_name = name\n\n  if (!isPlainObject(props)) {\n    return copy\n  }\n  const { validator, ...rest } = props\n\n  // 3. compose the validator function\n  // with the one on the source (if present)\n  // and ensure it is bound to the copy\n  if (isFunction(validator)) {\n    let { validator: prevValidator } = copy\n\n    if (prevValidator) {\n      prevValidator = unwrap(prevValidator) as (_v: any) => boolean\n    }\n\n    copy.validator = bindTo(\n      prevValidator\n        ? function (this: T, value: any) {\n            return (\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              prevValidator!.call(this, value) && validator.call(this, value)\n            )\n          }\n        : validator,\n      copy,\n    )\n  }\n  // 4. overwrite the rest, if present\n  return Object.assign(copy, rest as V)\n}\n\nexport function indent(string: string) {\n  return string.replace(/^(?!\\s*$)/gm, '  ')\n}\n", "import { toType, toValidableType, isInteger } from '../utils'\nimport { PropType } from '../types'\n\nexport const any = <T = any>() => toValidableType<T>('any', {})\n\nexport const func = <T extends (...args: any[]) => any>() =>\n  toValidableType<T>('function', {\n    type: Function as PropType<T>,\n  })\n\nexport const bool = () =>\n  toValidableType('boolean', {\n    type: Boolean,\n  })\n\nexport const string = <T extends string = string>() =>\n  toValidableType<T>('string', {\n    type: String as unknown as PropType<T>,\n  })\n\nexport const number = <T extends number = number>() =>\n  toValidableType<T>('number', {\n    type: Number as unknown as PropType<T>,\n  })\n\nexport const array = <T>() =>\n  toValidableType<T[]>('array', {\n    type: Array,\n  })\n\nexport const object = <T extends { [key: string]: any }>() =>\n  toValidableType<T>('object', {\n    type: Object,\n  })\n\nexport const integer = <T extends number = number>() =>\n  toType<T>('integer', {\n    type: Number as unknown as PropType<T>,\n    validator(value) {\n      return isInteger(value)\n    },\n  })\n\nexport const symbol = () =>\n  toType<symbol>('symbol', {\n    validator(value) {\n      return typeof value === 'symbol'\n    },\n  })\n\nexport const nullable = () => ({\n  type: null as unknown as PropType<null>,\n})\n", "import { toType, warn } from '../utils'\nimport { ValidatorFunction, VueTypeDef, PropType } from '../types'\n\nexport default function custom<T>(\n  validatorFn: ValidatorFunction<T>,\n  warnMsg = 'custom validation failed',\n) {\n  if (typeof validatorFn !== 'function') {\n    throw new TypeError(\n      '[VueTypes error]: You must provide a function as argument',\n    )\n  }\n\n  return toType<T>(validatorFn.name || '<<anonymous function>>', {\n    type: null as unknown as PropType<T>,\n    validator(this: VueTypeDef<T>, value: T) {\n      const valid = validatorFn(value)\n      if (!valid) warn(`${this._vueTypes_name} - ${warnMsg}`)\n      return valid\n    },\n  })\n}\n", "import { Prop } from '../types'\nimport { toType, warn, isArray } from '../utils'\n\nexport default function oneOf<T extends readonly any[]>(arr: T) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument.',\n    )\n  }\n  const msg = `oneOf - value should be one of \"${arr.join('\", \"')}\".`\n  const allowedTypes = arr.reduce((ret, v) => {\n    if (v !== null && v !== undefined) {\n      const constr = (v as any).constructor\n      ret.indexOf(constr) === -1 && ret.push(constr)\n    }\n    return ret\n  }, [] as Prop<T[number]>[])\n\n  return toType<T[number]>('oneOf', {\n    type: allowedTypes.length > 0 ? allowedTypes : undefined,\n    validator(value) {\n      const valid = arr.indexOf(value) !== -1\n      if (!valid) warn(msg)\n      return valid\n    },\n  })\n}\n", "import { Prop, VueProp, InferType, PropType } from '../types'\nimport {\n  isArray,\n  isComplexType,\n  isVueTypeDef,\n  isFunction,\n  toType,\n  validateType,\n  warn,\n  indent,\n} from '../utils'\n\nexport default function oneOfType<\n  D extends V,\n  U extends VueProp<any> | Prop<any> = any,\n  V = InferType<U>,\n>(arr: U[]) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument',\n    )\n  }\n\n  let hasCustomValidators = false\n\n  let nativeChecks: Prop<V>[] = []\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const type = arr[i]\n    if (isComplexType<V>(type)) {\n      if (\n        isVueTypeDef<V>(type) &&\n        type._vueTypes_name === 'oneOf' &&\n        type.type\n      ) {\n        nativeChecks = nativeChecks.concat(type.type as PropType<V>)\n        continue\n      }\n      if (isFunction(type.validator)) {\n        hasCustomValidators = true\n      }\n      if (type.type === true || !type.type) {\n        warn('oneOfType - invalid usage of \"true\" or \"null\" as types.')\n        continue\n      } else {\n        nativeChecks = nativeChecks.concat(type.type)\n      }\n    } else {\n      nativeChecks.push(type as Prop<V>)\n    }\n  }\n\n  // filter duplicates\n  nativeChecks = nativeChecks.filter((t, i) => nativeChecks.indexOf(t) === i)\n\n  const typeProp = nativeChecks.length > 0 ? nativeChecks : null\n\n  if (!hasCustomValidators) {\n    // we got just native objects (ie: Array, Object)\n    // delegate to Vue native prop check\n    return toType<D>('oneOfType', {\n      type: typeProp as unknown as PropType<D>,\n    })\n  }\n\n  return toType<D>('oneOfType', {\n    type: typeProp as unknown as PropType<D>,\n    validator(value) {\n      const err: string[] = []\n      const valid = arr.some((type) => {\n        const t =\n          isVueTypeDef(type) && type._vueTypes_name === 'oneOf'\n            ? type.type || null\n            : type\n        const res = validateType(t, value, true)\n        if (typeof res === 'string') {\n          err.push(res)\n        }\n        return res === true\n      })\n      if (!valid) {\n        warn(\n          `oneOfType - provided value does not match any of the ${\n            err.length\n          } passed-in validators:\\n${indent(err.join('\\n'))}`,\n        )\n      }\n\n      return valid\n    },\n  })\n}\n", "import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function arrayOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<InferType<T>[]>('arrayOf', {\n    type: Array,\n    validator(values: any[]) {\n      let vResult: string | boolean = ''\n      const valid = values.every((value) => {\n        vResult = validateType(type, value, true)\n        return vResult === true\n      })\n      if (!valid) {\n        warn(`arrayOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n", "import { toType } from '../utils'\nimport { Constructor } from '../types'\n\nexport default function instanceOf<C extends Constructor>(\n  instanceConstructor: C,\n) {\n  return toType<InstanceType<C>>('instanceOf', {\n    type: instanceConstructor,\n  })\n}\n", "import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function objectOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<{ [key: string]: InferType<T> }>('objectOf', {\n    type: Object,\n    validator(obj) {\n      let vResult: string | boolean = ''\n      const valid = Object.keys(obj).every((key) => {\n        vResult = validateType(type, obj[key], true)\n        return vResult === true\n      })\n\n      if (!valid) {\n        warn(`objectOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n", "import { Prop, VueProp, VueTypeShape, VueTypeLooseShape } from '../types'\nimport { toType, validateType, warn, isPlainObject, indent } from '../utils'\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport default function shape<T extends object>(obj: {\n  [K in keyof T]: Prop<T[K]> | VueProp<T[K]>\n}): VueTypeShape<T> {\n  const keys = Object.keys(obj)\n  const requiredKeys = keys.filter((key) => !!(obj as any)[key]?.required)\n\n  const type = toType('shape', {\n    type: Object,\n    validator(this: VueTypeShape<T> | VueTypeLooseShape<T>, value) {\n      if (!isPlainObject(value)) {\n        return false\n      }\n      const valueKeys = Object.keys(value)\n\n      // check for required keys (if any)\n      if (\n        requiredKeys.length > 0 &&\n        requiredKeys.some((req) => valueKeys.indexOf(req) === -1)\n      ) {\n        const missing = requiredKeys.filter(\n          (req) => valueKeys.indexOf(req) === -1,\n        )\n        if (missing.length === 1) {\n          warn(`shape - required property \"${missing[0]}\" is not defined.`)\n        } else {\n          warn(\n            `shape - required properties \"${missing.join(\n              '\", \"',\n            )}\" are not defined.`,\n          )\n        }\n\n        return false\n      }\n\n      return valueKeys.every((key) => {\n        if (keys.indexOf(key) === -1) {\n          if ((this as VueTypeLooseShape<T>)._vueTypes_isLoose === true)\n            return true\n          warn(\n            `shape - shape definition does not include a \"${key}\" property. Allowed keys: \"${keys.join(\n              '\", \"',\n            )}\".`,\n          )\n          return false\n        }\n        const type = (obj as any)[key]\n        const valid = validateType(type, value[key], true)\n        if (typeof valid === 'string') {\n          warn(`shape - \"${key}\" property validation error:\\n ${indent(valid)}`)\n        }\n        return valid === true\n      })\n    },\n  }) as VueTypeShape<T>\n\n  Object.defineProperty(type, '_vueTypes_isLoose', {\n    writable: true,\n    value: false,\n  })\n\n  Object.defineProperty(type, 'loose', {\n    get() {\n      this._vueTypes_isLoose = true\n      return this\n    },\n  })\n\n  return type\n}\n", "import {\n  toType,\n  toValidableType,\n  validateType,\n  isArray,\n  isVueTypeDef,\n  has,\n  fromType,\n} from './utils'\n\nimport {\n  VueTypesDefaults,\n  ExtendProps,\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueTypeShape,\n  VueTypeLooseShape,\n} from './types'\nimport { typeDefaults } from './sensibles'\nimport { PropOptions } from './types'\n\nimport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n  nullable,\n} from './validators/native'\nimport custom from './validators/custom'\nimport oneOf from './validators/oneof'\nimport oneOfType from './validators/oneoftype'\nimport arrayOf from './validators/arrayof'\nimport instanceOf from './validators/instanceof'\nimport objectOf from './validators/objectof'\nimport shape from './validators/shape'\nimport { config } from './config'\n\nconst BaseVueTypes = /*#__PURE__*/ (() =>\n  class BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = {}\n\n    static sensibleDefaults: Partial<VueTypesDefaults> | boolean\n\n    static config = config\n\n    static get any() {\n      return any()\n    }\n    static get func() {\n      return func().def(this.defaults.func)\n    }\n    static get bool() {\n      return bool().def(this.defaults.bool)\n    }\n    static get string() {\n      return string().def(this.defaults.string)\n    }\n    static get number() {\n      return number().def(this.defaults.number)\n    }\n    static get array() {\n      return array().def(this.defaults.array)\n    }\n    static get object() {\n      return object().def(this.defaults.object)\n    }\n    static get integer() {\n      return integer().def(this.defaults.integer)\n    }\n    static get symbol() {\n      return symbol()\n    }\n\n    static get nullable() {\n      return nullable()\n    }\n\n    static readonly custom = custom\n    static readonly oneOf = oneOf\n    static readonly instanceOf = instanceOf\n    static readonly oneOfType = oneOfType\n    static readonly arrayOf = arrayOf\n    static readonly objectOf = objectOf\n    static readonly shape = shape\n\n    static extend<T extends typeof BaseVueTypes>(\n      props: ExtendProps | ExtendProps[],\n    ): T {\n      if (isArray(props)) {\n        props.forEach((p) => this.extend(p))\n        return this as any\n      }\n\n      const { name, validate = false, getter = false, ...opts } = props\n\n      if (has(this, name as any)) {\n        throw new TypeError(`[VueTypes error]: Type \"${name}\" already defined`)\n      }\n\n      const { type } = opts\n      if (isVueTypeDef(type)) {\n        // we are using as base type a vue-type object\n\n        // detach the original type\n        // we are going to inherit the parent data.\n        delete opts.type\n\n        if (getter) {\n          return Object.defineProperty(this as T, name, {\n            get: () => fromType(name, type, opts as Omit<ExtendProps, 'type'>),\n          })\n        }\n        return Object.defineProperty(this as T, name, {\n          value(...args: unknown[]) {\n            const t = fromType(name, type, opts as Omit<ExtendProps, 'type'>)\n            if (t.validator) {\n              t.validator = t.validator.bind(t, ...args)\n            }\n            return t\n          },\n        })\n      }\n\n      let descriptor: PropertyDescriptor\n      if (getter) {\n        descriptor = {\n          get() {\n            const typeOptions = Object.assign({}, opts as PropOptions<T>)\n            if (validate) {\n              return toValidableType<T>(name, typeOptions)\n            }\n            return toType<T>(name, typeOptions)\n          },\n          enumerable: true,\n        }\n      } else {\n        descriptor = {\n          value(...args: T[]) {\n            const typeOptions = Object.assign({}, opts as PropOptions<T>)\n            let ret: VueTypeDef<T>\n            if (validate) {\n              ret = toValidableType<T>(name, typeOptions)\n            } else {\n              ret = toType<T>(name, typeOptions)\n            }\n\n            if (typeOptions.validator) {\n              ret.validator = typeOptions.validator.bind(ret, ...args)\n            }\n            return ret\n          },\n          enumerable: true,\n        }\n      }\n\n      return Object.defineProperty(this as T, name, descriptor)\n    }\n\n    static utils = {\n      validate<T, U>(value: T, type: U) {\n        return validateType<U, T>(type, value, true) === true\n      },\n      toType<T = unknown>(\n        name: string,\n        obj: PropOptions<T>,\n        validable = false,\n      ): VueTypeDef<T> | VueTypeValidableDef<T> {\n        return validable ? toValidableType<T>(name, obj) : toType<T>(name, obj)\n      },\n    }\n  })()\n\nfunction createTypes(defs: Partial<VueTypesDefaults> = typeDefaults()) {\n  return class extends BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = { ...defs }\n\n    static get sensibleDefaults() {\n      return { ...this.defaults }\n    }\n\n    static set sensibleDefaults(v: boolean | Partial<VueTypesDefaults>) {\n      if (v === false) {\n        this.defaults = {}\n        return\n      }\n      if (v === true) {\n        this.defaults = { ...defs }\n        return\n      }\n      this.defaults = { ...v }\n    }\n  }\n}\n\nexport default class VueTypes /*#__PURE__*/ extends createTypes() {}\n\nexport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n  custom,\n  oneOf,\n  oneOfType,\n  arrayOf,\n  instanceOf,\n  objectOf,\n  shape,\n  nullable,\n  createTypes,\n  toType,\n  toValidableType,\n  validateType,\n  fromType,\n  config,\n}\n\nexport type VueTypesInterface = ReturnType<typeof createTypes>\nexport type { VueTypeDef, VueTypeValidableDef, VueTypeShape, VueTypeLooseShape }\n", "import { VueTypesDefaults } from './types'\n\nexport const typeDefaults = (): VueTypesDefaults => ({\n  func: () => undefined,\n  bool: true,\n  string: '',\n  number: 0,\n  array: () => [],\n  object: () => ({}),\n  integer: 0,\n})\n", "import d from \"../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/dist/vue-types.modern.js\";export default d;\nexport * from \"../../../node_modules/.pnpm/registry.npmmirror.com+vue-types@4.2.1_vue@3.2.31/node_modules/vue-types/dist/vue-types.modern.js\""],
  "mappings": "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",
  "names": ["o", "config", "silent", "logLevel", "_excluded", "ObjProto", "Object", "prototype", "toString", "hasOwn", "hasOwnProperty", "FN_MATCH_REGEXP", "getType", "fn", "_fn$type", "type", "match", "isPlainObject", "_isPlainObject", "identity", "arg", "warn", "console", "hasConsole", "msg", "level", "has", "obj", "prop", "call", "isInteger", "Number", "value", "isFinite", "Math", "floor", "isArray", "Array", "isFunction", "isVueTypeDef", "isComplexType", "some", "k", "bindTo", "ctx", "defineProperty", "bind", "validateType", "typeToCheck", "o", "a", "_vueTypes_name", "valid", "required", "i", "expectedType", "map", "join", "getNativeType", "constructor", "namePrefix", "validator", "oldWarn", "warnLog", "push", "length", "toType", "name", "defineProperties", "writable", "isRequired", "get", "this", "def", "default", "assign", "toValidableType", "JSON", "stringify", "fromType", "source", "props", "descriptors", "getOwnPropertyNames", "forEach", "key", "getOwnPropertyDescriptor", "copy", "rest", "prevValidator", "_fn$__original", "__original", "unwrap", "indent", "string", "replace", "any", "Function", "bool", "Boolean", "String", "number", "integer", "symbol", "nullable", "custom", "validatorFn", "warnMsg", "TypeError", "oneOf", "arr", "t", "allowedTypes", "reduce", "ret", "v", "constr", "indexOf", "oneOfType", "hasCustomValidators", "nativeChecks", "n", "concat", "filter", "typeProp", "err", "res", "arrayOf", "values", "r", "every", "vResult", "instanceOf", "instanceConstructor", "keys", "requiredKeys", "_obj$key", "valueKeys", "req", "missing", "_vueTypes_isLoose", "BaseVueTypes", "func", "defaults", "array", "object", "static", "p", "extend", "validate", "getter", "opts", "args", "descriptor", "typeOptions", "enumerable", "_class", "sensibleDefaults", "objectOf", "shape", "utils", "validable", "createTypes", "defs", "_class2", "_extends", "VueTypes"]
}
