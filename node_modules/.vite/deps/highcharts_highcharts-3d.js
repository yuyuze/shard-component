import {
  __commonJS
} from "./chunk-HUBM7RA2.js";

// ../../node_modules/.pnpm/registry.npmmirror.com+highcharts@10.3.2/node_modules/highcharts/highcharts-3d.js
var require_highcharts_3d = __commonJS({
  "../../node_modules/.pnpm/registry.npmmirror.com+highcharts@10.3.2/node_modules/highcharts/highcharts-3d.js"(exports, module) {
    (function(a) {
      "object" === typeof module && module.exports ? (a["default"] = a, module.exports = a) : "function" === typeof define && define.amd ? define("highcharts/highcharts-3d", ["highcharts"], function(F) {
        a(F);
        a.Highcharts = F;
        return a;
      }) : a("undefined" !== typeof Highcharts ? Highcharts : void 0);
    })(function(a) {
      function F(a2, z, y, D) {
        a2.hasOwnProperty(z) || (a2[z] = D.apply(null, y), "function" === typeof CustomEvent && window.dispatchEvent(new CustomEvent("HighchartsModuleLoaded", { detail: { path: z, module: a2[z] } })));
      }
      a = a ? a._modules : {};
      F(
        a,
        "Core/Math3D.js",
        [a["Core/Globals.js"], a["Core/Utilities.js"]],
        function(a2, z) {
          function y(m2, f, k, c) {
            var b = f.options.chart.options3d, a3 = r(c, k ? f.inverted : false), g = { x: f.plotWidth / 2, y: f.plotHeight / 2, z: b.depth / 2, vd: r(b.depth, 1) * r(b.viewDistance, 0) }, B = f.scale3d || 1;
            c = H * b.beta * (a3 ? -1 : 1);
            b = H * b.alpha * (a3 ? -1 : 1);
            var p = Math.cos(b), t = Math.cos(-c), C = Math.sin(b), n = Math.sin(-c);
            k || (g.x += f.plotLeft, g.y += f.plotTop);
            return m2.map(function(b2) {
              var f2 = (a3 ? b2.y : b2.x) - g.x;
              var c2 = (a3 ? b2.x : b2.y) - g.y;
              b2 = (b2.z || 0) - g.z;
              f2 = { x: t * f2 - n * b2, y: -C * n * f2 + p * c2 - t * C * b2, z: p * n * f2 + C * c2 + p * t * b2 };
              c2 = x(f2, g, g.vd);
              c2.x = c2.x * B + g.x;
              c2.y = c2.y * B + g.y;
              c2.z = f2.z * B + g.z;
              return { x: a3 ? c2.y : c2.x, y: a3 ? c2.x : c2.y, z: c2.z };
            });
          }
          function x(a3, f, k) {
            f = 0 < k && k < Number.POSITIVE_INFINITY ? k / (a3.z + f.z + k) : 1;
            return { x: a3.x * f, y: a3.y * f };
          }
          function m(a3) {
            var f = 0, k;
            for (k = 0; k < a3.length; k++) {
              var c = (k + 1) % a3.length;
              f += a3[k].x * a3[c].y - a3[c].x * a3[k].y;
            }
            return f / 2;
          }
          var H = a2.deg2rad, r = z.pick;
          return { perspective: y, perspective3D: x, pointCameraDistance: function(a3, f) {
            var k = f.options.chart.options3d, c = f.plotWidth / 2;
            f = f.plotHeight / 2;
            k = r(k.depth, 1) * r(k.viewDistance, 0) + k.depth;
            return Math.sqrt(Math.pow(c - r(a3.plotX, a3.x), 2) + Math.pow(f - r(a3.plotY, a3.y), 2) + Math.pow(k - r(a3.plotZ, a3.z), 2));
          }, shapeArea: m, shapeArea3D: function(a3, f, k) {
            return m(y(a3, f, k));
          } };
        }
      );
      F(a, "Core/Renderer/SVG/SVGElement3D.js", [a["Core/Color/Color.js"], a["Core/Renderer/SVG/SVGElement.js"], a["Core/Utilities.js"]], function(a2, z, y) {
        var x = a2.parse, m = y.defined;
        a2 = y.merge;
        var H = y.objectEach, r = y.pick, C = { base: { initArgs: function(f) {
          var a3 = this, c = a3.renderer, b = c[a3.pathType + "Path"](f), m2 = b.zIndexes;
          a3.parts.forEach(function(g) {
            var f2 = { "class": "highcharts-3d-" + g, zIndex: m2[g] || 0 };
            c.styledMode && ("top" === g ? f2.filter = "url(#highcharts-brighter)" : "side" === g && (f2.filter = "url(#highcharts-darker)"));
            a3[g] = c.path(b[g]).attr(f2).add(a3);
          });
          a3.attr({ "stroke-linejoin": "round", zIndex: m2.group });
          a3.originalDestroy = a3.destroy;
          a3.destroy = a3.destroyParts;
          a3.forcedSides = b.forcedSides;
        }, singleSetterForParts: function(a3, m2, c, b, l, g) {
          var f = {};
          b = [null, null, b || "attr", l, g];
          var p = c && c.zIndexes;
          c ? (p && p.group && this.attr({ zIndex: p.group }), H(c, function(b2, g2) {
            f[g2] = {};
            f[g2][a3] = b2;
            p && (f[g2].zIndex = c.zIndexes[g2] || 0);
          }), b[1] = f) : (f[a3] = m2, b[0] = f);
          return this.processParts.apply(this, b);
        }, processParts: function(a3, m2, c, b, l) {
          var g = this;
          g.parts.forEach(function(f) {
            m2 && (a3 = r(m2[f], false));
            if (false !== a3)
              g[f][c](a3, b, l);
          });
          return g;
        }, destroyParts: function() {
          this.processParts(null, null, "destroy");
          return this.originalDestroy();
        } } };
        C.cuboid = a2(C.base, { parts: ["front", "top", "side"], pathType: "cuboid", attr: function(a3, k, c, b) {
          if ("string" === typeof a3 && "undefined" !== typeof k) {
            var f = a3;
            a3 = {};
            a3[f] = k;
          }
          return a3.shapeArgs || m(a3.x) ? this.singleSetterForParts("d", null, this.renderer[this.pathType + "Path"](a3.shapeArgs || a3)) : z.prototype.attr.call(this, a3, void 0, c, b);
        }, animate: function(a3, k, c) {
          if (m(a3.x) && m(a3.y)) {
            a3 = this.renderer[this.pathType + "Path"](a3);
            var b = a3.forcedSides;
            this.singleSetterForParts("d", null, a3, "animate", k, c);
            this.attr({ zIndex: a3.zIndexes.group });
            b !== this.forcedSides && (this.forcedSides = b, this.renderer.styledMode || C.cuboid.fillSetter.call(this, this.fill));
          } else
            z.prototype.animate.call(this, a3, k, c);
          return this;
        }, fillSetter: function(a3) {
          this.forcedSides = this.forcedSides || [];
          this.singleSetterForParts("fill", null, { front: a3, top: x(a3).brighten(0 <= this.forcedSides.indexOf("top") ? 0 : 0.1).get(), side: x(a3).brighten(0 <= this.forcedSides.indexOf("side") ? 0 : -0.1).get() });
          this.color = this.fill = a3;
          return this;
        } });
        return C;
      });
      F(a, "Core/Renderer/SVG/SVGRenderer3D.js", [
        a["Core/Animation/AnimationUtilities.js"],
        a["Core/Color/Color.js"],
        a["Core/Globals.js"],
        a["Core/Math3D.js"],
        a["Core/Renderer/SVG/SVGElement.js"],
        a["Core/Renderer/SVG/SVGElement3D.js"],
        a["Core/Renderer/SVG/SVGRenderer.js"],
        a["Core/Utilities.js"]
      ], function(a2, z, y, D, m, H, r, C) {
        var f = this && this.__extends || function() {
          var a3 = function(h, b2) {
            a3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a4, e) {
              a4.__proto__ = e;
            } || function(a4, e) {
              for (var u in e)
                e.hasOwnProperty(u) && (a4[u] = e[u]);
            };
            return a3(h, b2);
          };
          return function(h, b2) {
            function g2() {
              this.constructor = h;
            }
            a3(h, b2);
            h.prototype = null === b2 ? Object.create(b2) : (g2.prototype = b2.prototype, new g2());
          };
        }(), k = a2.animObject, c = z.parse, b = y.charts, l = y.deg2rad, g = D.perspective, B = D.shapeArea, p = C.defined, t = C.extend, v = C.merge, n = C.pick, x = Math.cos, E = Math.sin, J = Math.PI, K = 4 * (Math.sqrt(2) - 1) / 3 / (J / 2);
        return function(a3) {
          function h() {
            return null !== a3 && a3.apply(this, arguments) || this;
          }
          f(h, a3);
          h.compose = function(a4) {
            a4 = a4.prototype;
            var b2 = h.prototype;
            a4.elements3d = H;
            a4.arc3d = b2.arc3d;
            a4.arc3dPath = b2.arc3dPath;
            a4.cuboid = b2.cuboid;
            a4.cuboidPath = b2.cuboidPath;
            a4.element3d = b2.element3d;
            a4.face3d = b2.face3d;
            a4.polyhedron = b2.polyhedron;
            a4.toLinePath = b2.toLinePath;
            a4.toLineSegments = b2.toLineSegments;
          };
          h.curveTo = function(a4, b2, e, u, d, q, w, A) {
            var h2 = [], g2 = q - d;
            return q > d && q - d > Math.PI / 2 + 1e-4 ? (h2 = h2.concat(this.curveTo(a4, b2, e, u, d, d + Math.PI / 2, w, A)), h2 = h2.concat(this.curveTo(a4, b2, e, u, d + Math.PI / 2, q, w, A))) : q < d && d - q > Math.PI / 2 + 1e-4 ? (h2 = h2.concat(this.curveTo(a4, b2, e, u, d, d - Math.PI / 2, w, A)), h2 = h2.concat(this.curveTo(a4, b2, e, u, d - Math.PI / 2, q, w, A))) : [["C", a4 + e * Math.cos(d) - e * K * g2 * Math.sin(d) + w, b2 + u * Math.sin(d) + u * K * g2 * Math.cos(d) + A, a4 + e * Math.cos(q) + e * K * g2 * Math.sin(q) + w, b2 + u * Math.sin(q) - u * K * g2 * Math.cos(q) + A, a4 + e * Math.cos(q) + w, b2 + u * Math.sin(q) + A]];
          };
          h.prototype.toLinePath = function(a4, b2) {
            var e = [];
            a4.forEach(function(a5) {
              e.push([
                "L",
                a5.x,
                a5.y
              ]);
            });
            a4.length && (e[0][0] = "M", b2 && e.push(["Z"]));
            return e;
          };
          h.prototype.toLineSegments = function(a4) {
            var b2 = [], e = true;
            a4.forEach(function(a5) {
              b2.push(e ? ["M", a5.x, a5.y] : ["L", a5.x, a5.y]);
              e = !e;
            });
            return b2;
          };
          h.prototype.face3d = function(a4) {
            var h2 = this, e = this.createElement("path");
            e.vertexes = [];
            e.insidePlotArea = false;
            e.enabled = true;
            e.attr = function(e2) {
              if ("object" === typeof e2 && (p(e2.enabled) || p(e2.vertexes) || p(e2.insidePlotArea))) {
                this.enabled = n(e2.enabled, this.enabled);
                this.vertexes = n(e2.vertexes, this.vertexes);
                this.insidePlotArea = n(e2.insidePlotArea, this.insidePlotArea);
                delete e2.enabled;
                delete e2.vertexes;
                delete e2.insidePlotArea;
                var d = g(this.vertexes, b[h2.chartIndex], this.insidePlotArea), q = h2.toLinePath(d, true);
                d = B(d);
                e2.d = q;
                e2.visibility = this.enabled && 0 < d ? "inherit" : "hidden";
              }
              return m.prototype.attr.apply(this, arguments);
            };
            e.animate = function(e2) {
              if ("object" === typeof e2 && (p(e2.enabled) || p(e2.vertexes) || p(e2.insidePlotArea))) {
                this.enabled = n(e2.enabled, this.enabled);
                this.vertexes = n(e2.vertexes, this.vertexes);
                this.insidePlotArea = n(
                  e2.insidePlotArea,
                  this.insidePlotArea
                );
                delete e2.enabled;
                delete e2.vertexes;
                delete e2.insidePlotArea;
                var d = g(this.vertexes, b[h2.chartIndex], this.insidePlotArea), q = h2.toLinePath(d, true);
                d = B(d);
                d = this.enabled && 0 < d ? "visible" : "hidden";
                e2.d = q;
                this.attr("visibility", d);
              }
              return m.prototype.animate.apply(this, arguments);
            };
            return e.attr(a4);
          };
          h.prototype.polyhedron = function(a4) {
            var b2 = this, e = this.g(), h2 = e.destroy;
            this.styledMode || e.attr({ "stroke-linejoin": "round" });
            e.faces = [];
            e.destroy = function() {
              for (var d = 0; d < e.faces.length; d++)
                e.faces[d].destroy();
              return h2.call(this);
            };
            e.attr = function(d, q, a5, h3) {
              if ("object" === typeof d && p(d.faces)) {
                for (; e.faces.length > d.faces.length; )
                  e.faces.pop().destroy();
                for (; e.faces.length < d.faces.length; )
                  e.faces.push(b2.face3d().add(e));
                for (var w = 0; w < d.faces.length; w++)
                  b2.styledMode && delete d.faces[w].fill, e.faces[w].attr(d.faces[w], null, a5, h3);
                delete d.faces;
              }
              return m.prototype.attr.apply(this, arguments);
            };
            e.animate = function(d, q, a5) {
              if (d && d.faces) {
                for (; e.faces.length > d.faces.length; )
                  e.faces.pop().destroy();
                for (; e.faces.length < d.faces.length; )
                  e.faces.push(b2.face3d().add(e));
                for (var w = 0; w < d.faces.length; w++)
                  e.faces[w].animate(d.faces[w], q, a5);
                delete d.faces;
              }
              return m.prototype.animate.apply(this, arguments);
            };
            return e.attr(a4);
          };
          h.prototype.element3d = function(a4, b2) {
            var e = this.g();
            t(e, this.elements3d[a4]);
            e.initArgs(b2);
            return e;
          };
          h.prototype.cuboid = function(a4) {
            return this.element3d("cuboid", a4);
          };
          h.prototype.cuboidPath = function(a4) {
            function h2(e2) {
              return 0 === w && 1 < e2 && 6 > e2 ? { x: I[e2].x, y: I[e2].y + 10, z: I[e2].z } : I[0].x === I[7].x && 4 <= e2 ? { x: I[e2].x + 10, y: I[e2].y, z: I[e2].z } : 0 === c2 && 2 > e2 || 5 < e2 ? {
                x: I[e2].x,
                y: I[e2].y,
                z: I[e2].z + 10
              } : I[e2];
            }
            function e(e2) {
              return I[e2];
            }
            var u = a4.x || 0, d = a4.y || 0, q = a4.z || 0, w = a4.height || 0, A = a4.width || 0, c2 = a4.depth || 0, f2 = b[this.chartIndex], m2 = f2.options.chart.options3d.alpha, p2 = 0, I = [{ x: u, y: d, z: q }, { x: u + A, y: d, z: q }, { x: u + A, y: d + w, z: q }, { x: u, y: d + w, z: q }, { x: u, y: d + w, z: q + c2 }, { x: u + A, y: d + w, z: q + c2 }, { x: u + A, y: d, z: q + c2 }, { x: u, y: d, z: q + c2 }], k2 = [];
            I = g(I, f2, a4.insidePlotArea);
            var G = function(d2, a5, q2) {
              var w2 = [[], -1], b2 = d2.map(e), u2 = a5.map(e);
              d2 = d2.map(h2);
              a5 = a5.map(h2);
              0 > B(b2) ? w2 = [b2, 0] : 0 > B(u2) ? w2 = [u2, 1] : q2 && (k2.push(q2), w2 = 0 > B(d2) ? [b2, 0] : 0 > B(a5) ? [u2, 1] : [b2, 0]);
              return w2;
            };
            var l2 = G([3, 2, 1, 0], [7, 6, 5, 4], "front");
            a4 = l2[0];
            var t2 = l2[1];
            l2 = G([1, 6, 7, 0], [4, 5, 2, 3], "top");
            A = l2[0];
            var r2 = l2[1];
            l2 = G([1, 2, 5, 6], [0, 7, 4, 3], "side");
            G = l2[0];
            l2 = l2[1];
            1 === l2 ? p2 += 1e6 * (f2.plotWidth - u) : l2 || (p2 += 1e6 * u);
            p2 += 10 * (!r2 || 0 <= m2 && 180 >= m2 || 360 > m2 && 357.5 < m2 ? f2.plotHeight - d : 10 + d);
            1 === t2 ? p2 += 100 * q : t2 || (p2 += 100 * (1e3 - q));
            return { front: this.toLinePath(a4, true), top: this.toLinePath(A, true), side: this.toLinePath(G, true), zIndexes: { group: Math.round(p2) }, forcedSides: k2, isFront: t2, isTop: r2 };
          };
          h.prototype.arc3d = function(a4) {
            function b2(e2) {
              var a5 = false, q = {}, b3;
              e2 = v(e2);
              for (b3 in e2)
                -1 !== d.indexOf(b3) && (q[b3] = e2[b3], delete e2[b3], a5 = true);
              return a5 ? [q, e2] : false;
            }
            var e = this.g(), h2 = e.renderer, d = "x y r innerR start end depth".split(" ");
            a4 = v(a4);
            a4.alpha = (a4.alpha || 0) * l;
            a4.beta = (a4.beta || 0) * l;
            e.top = h2.path();
            e.side1 = h2.path();
            e.side2 = h2.path();
            e.inn = h2.path();
            e.out = h2.path();
            e.onAdd = function() {
              var d2 = e.parentGroup, a5 = e.attr("class");
              e.top.add(e);
              ["out", "inn", "side1", "side2"].forEach(function(q) {
                e[q].attr({ "class": a5 + " highcharts-3d-side" }).add(d2);
              });
            };
            ["addClass", "removeClass"].forEach(function(d2) {
              e[d2] = function() {
                var a5 = arguments;
                ["top", "out", "inn", "side1", "side2"].forEach(function(q) {
                  e[q][d2].apply(e[q], a5);
                });
              };
            });
            e.setPaths = function(d2) {
              var a5 = e.renderer.arc3dPath(d2), q = 100 * a5.zTop;
              e.attribs = d2;
              e.top.attr({ d: a5.top, zIndex: a5.zTop });
              e.inn.attr({ d: a5.inn, zIndex: a5.zInn });
              e.out.attr({ d: a5.out, zIndex: a5.zOut });
              e.side1.attr({ d: a5.side1, zIndex: a5.zSide1 });
              e.side2.attr({ d: a5.side2, zIndex: a5.zSide2 });
              e.zIndex = q;
              e.attr({ zIndex: q });
              d2.center && (e.top.setRadialReference(d2.center), delete d2.center);
            };
            e.setPaths(a4);
            e.fillSetter = function(e2) {
              var d2 = c(e2).brighten(-0.1).get();
              this.fill = e2;
              this.side1.attr({ fill: d2 });
              this.side2.attr({ fill: d2 });
              this.inn.attr({ fill: d2 });
              this.out.attr({ fill: d2 });
              this.top.attr({ fill: e2 });
              return this;
            };
            ["opacity", "translateX", "translateY", "visibility"].forEach(function(d2) {
              e[d2 + "Setter"] = function(d3, a5) {
                e[a5] = d3;
                ["out", "inn", "side1", "side2", "top"].forEach(function(q) {
                  e[q].attr(a5, d3);
                });
              };
            });
            e.attr = function(d2) {
              var a5;
              if ("object" === typeof d2 && (a5 = b2(d2))) {
                var q = a5[0];
                arguments[0] = a5[1];
                t(e.attribs, q);
                e.setPaths(e.attribs);
              }
              return m.prototype.attr.apply(
                e,
                arguments
              );
            };
            e.animate = function(d2, a5, h3) {
              var q = this.attribs, u = "data-" + Math.random().toString(26).substring(2, 9);
              delete d2.center;
              delete d2.z;
              delete d2.alpha;
              delete d2.beta;
              var w = k(n(a5, this.renderer.globalAnimation));
              if (w.duration) {
                a5 = b2(d2);
                e[u] = 0;
                d2[u] = 1;
                e[u + "Setter"] = y.noop;
                if (a5) {
                  var A = a5[0];
                  w.step = function(d3, e2) {
                    function a6(d4) {
                      return q[d4] + (n(A[d4], q[d4]) - q[d4]) * e2.pos;
                    }
                    e2.prop === u && e2.elem.setPaths(v(q, { x: a6("x"), y: a6("y"), r: a6("r"), innerR: a6("innerR"), start: a6("start"), end: a6("end"), depth: a6("depth") }));
                  };
                }
                a5 = w;
              }
              return m.prototype.animate.call(
                this,
                d2,
                a5,
                h3
              );
            };
            e.destroy = function() {
              this.top.destroy();
              this.out.destroy();
              this.inn.destroy();
              this.side1.destroy();
              this.side2.destroy();
              return m.prototype.destroy.call(this);
            };
            e.hide = function() {
              this.top.hide();
              this.out.hide();
              this.inn.hide();
              this.side1.hide();
              this.side2.hide();
            };
            e.show = function(d2) {
              this.top.show(d2);
              this.out.show(d2);
              this.inn.show(d2);
              this.side1.show(d2);
              this.side2.show(d2);
            };
            return e;
          };
          h.prototype.arc3dPath = function(a4) {
            function b2(d2) {
              d2 %= 2 * Math.PI;
              d2 > Math.PI && (d2 = 2 * Math.PI - d2);
              return d2;
            }
            var e = a4.x || 0, u = a4.y || 0, d = a4.start || 0, q = (a4.end || 0) - 1e-5, w = a4.r || 0, A = a4.innerR || 0, g2 = a4.depth || 0, c2 = a4.alpha || 0, f2 = a4.beta || 0, m2 = Math.cos(d), p2 = Math.sin(d);
            a4 = Math.cos(q);
            var k2 = Math.sin(q), l2 = w * Math.cos(f2);
            w *= Math.cos(c2);
            var t2 = A * Math.cos(f2), r2 = A * Math.cos(c2);
            A = g2 * Math.sin(f2);
            var n2 = g2 * Math.sin(c2);
            g2 = [["M", e + l2 * m2, u + w * p2]];
            g2 = g2.concat(h.curveTo(e, u, l2, w, d, q, 0, 0));
            g2.push(["L", e + t2 * a4, u + r2 * k2]);
            g2 = g2.concat(h.curveTo(e, u, t2, r2, q, d, 0, 0));
            g2.push(["Z"]);
            var B2 = 0 < f2 ? Math.PI / 2 : 0;
            f2 = 0 < c2 ? 0 : Math.PI / 2;
            B2 = d > -B2 ? d : q > -B2 ? -B2 : d;
            var G = q < J - f2 ? q : d < J - f2 ? J - f2 : q, v2 = 2 * J - f2;
            c2 = [[
              "M",
              e + l2 * x(B2),
              u + w * E(B2)
            ]];
            c2 = c2.concat(h.curveTo(e, u, l2, w, B2, G, 0, 0));
            q > v2 && d < v2 ? (c2.push(["L", e + l2 * x(G) + A, u + w * E(G) + n2]), c2 = c2.concat(h.curveTo(e, u, l2, w, G, v2, A, n2)), c2.push(["L", e + l2 * x(v2), u + w * E(v2)]), c2 = c2.concat(h.curveTo(e, u, l2, w, v2, q, 0, 0)), c2.push(["L", e + l2 * x(q) + A, u + w * E(q) + n2]), c2 = c2.concat(h.curveTo(e, u, l2, w, q, v2, A, n2)), c2.push(["L", e + l2 * x(v2), u + w * E(v2)]), c2 = c2.concat(h.curveTo(e, u, l2, w, v2, G, 0, 0))) : q > J - f2 && d < J - f2 && (c2.push(["L", e + l2 * Math.cos(G) + A, u + w * Math.sin(G) + n2]), c2 = c2.concat(h.curveTo(e, u, l2, w, G, q, A, n2)), c2.push(["L", e + l2 * Math.cos(q), u + w * Math.sin(q)]), c2 = c2.concat(h.curveTo(e, u, l2, w, q, G, 0, 0)));
            c2.push(["L", e + l2 * Math.cos(G) + A, u + w * Math.sin(G) + n2]);
            c2 = c2.concat(h.curveTo(e, u, l2, w, G, B2, A, n2));
            c2.push(["Z"]);
            f2 = [["M", e + t2 * m2, u + r2 * p2]];
            f2 = f2.concat(h.curveTo(e, u, t2, r2, d, q, 0, 0));
            f2.push(["L", e + t2 * Math.cos(q) + A, u + r2 * Math.sin(q) + n2]);
            f2 = f2.concat(h.curveTo(e, u, t2, r2, q, d, A, n2));
            f2.push(["Z"]);
            m2 = [["M", e + l2 * m2, u + w * p2], ["L", e + l2 * m2 + A, u + w * p2 + n2], ["L", e + t2 * m2 + A, u + r2 * p2 + n2], ["L", e + t2 * m2, u + r2 * p2], ["Z"]];
            e = [["M", e + l2 * a4, u + w * k2], ["L", e + l2 * a4 + A, u + w * k2 + n2], ["L", e + t2 * a4 + A, u + r2 * k2 + n2], ["L", e + t2 * a4, u + r2 * k2], ["Z"]];
            k2 = Math.atan2(
              n2,
              -A
            );
            u = Math.abs(q + k2);
            a4 = Math.abs(d + k2);
            d = Math.abs((d + q) / 2 + k2);
            u = b2(u);
            a4 = b2(a4);
            d = b2(d);
            d *= 1e5;
            q = 1e5 * a4;
            u *= 1e5;
            return { top: g2, zTop: 1e5 * Math.PI + 1, out: c2, zOut: Math.max(d, q, u), inn: f2, zInn: Math.max(d, q, u), side1: m2, zSide1: 0.99 * u, side2: e, zSide2: 0.99 * q };
          };
          return h;
        }(r);
      });
      F(a, "Core/Chart/Chart3D.js", [a["Core/Color/Color.js"], a["Core/Defaults.js"], a["Core/Math3D.js"], a["Core/Utilities.js"]], function(a2, z, y, D) {
        var m = a2.parse, x = z.defaultOptions, r = y.perspective, C = y.shapeArea3D, f = D.addEvent, k = D.isArray, c = D.merge, b = D.pick, l = D.wrap, g;
        (function(a3) {
          function g2(a4) {
            this.is3d() && "scatter" === a4.options.type && (a4.options.type = "scatter3d");
          }
          function t() {
            if (this.chart3d && this.is3d()) {
              var a4 = this.renderer, b2 = this.options.chart.options3d, d = this.chart3d.get3dFrame(), q = this.plotLeft, h2 = this.plotLeft + this.plotWidth, g3 = this.plotTop, c2 = this.plotTop + this.plotHeight;
              b2 = b2.depth;
              var f2 = q - (d.left.visible ? d.left.size : 0), l2 = h2 + (d.right.visible ? d.right.size : 0), p = g3 - (d.top.visible ? d.top.size : 0), k2 = c2 + (d.bottom.visible ? d.bottom.size : 0), t2 = 0 - (d.front.visible ? d.front.size : 0), n2 = b2 + (d.back.visible ? d.back.size : 0), r2 = this.hasRendered ? "animate" : "attr";
              this.chart3d.frame3d = d;
              this.frameShapes || (this.frameShapes = { bottom: a4.polyhedron().add(), top: a4.polyhedron().add(), left: a4.polyhedron().add(), right: a4.polyhedron().add(), back: a4.polyhedron().add(), front: a4.polyhedron().add() });
              this.frameShapes.bottom[r2]({ "class": "highcharts-3d-frame highcharts-3d-frame-bottom", zIndex: d.bottom.frontFacing ? -1e3 : 1e3, faces: [{ fill: m(d.bottom.color).brighten(0.1).get(), vertexes: [
                { x: f2, y: k2, z: t2 },
                { x: l2, y: k2, z: t2 },
                { x: l2, y: k2, z: n2 },
                { x: f2, y: k2, z: n2 }
              ], enabled: d.bottom.visible }, { fill: m(d.bottom.color).brighten(0.1).get(), vertexes: [{ x: q, y: c2, z: b2 }, { x: h2, y: c2, z: b2 }, { x: h2, y: c2, z: 0 }, { x: q, y: c2, z: 0 }], enabled: d.bottom.visible }, { fill: m(d.bottom.color).brighten(-0.1).get(), vertexes: [{ x: f2, y: k2, z: t2 }, { x: f2, y: k2, z: n2 }, { x: q, y: c2, z: b2 }, { x: q, y: c2, z: 0 }], enabled: d.bottom.visible && !d.left.visible }, { fill: m(d.bottom.color).brighten(-0.1).get(), vertexes: [{ x: l2, y: k2, z: n2 }, { x: l2, y: k2, z: t2 }, { x: h2, y: c2, z: 0 }, { x: h2, y: c2, z: b2 }], enabled: d.bottom.visible && !d.right.visible }, {
                fill: m(d.bottom.color).get(),
                vertexes: [{ x: l2, y: k2, z: t2 }, { x: f2, y: k2, z: t2 }, { x: q, y: c2, z: 0 }, { x: h2, y: c2, z: 0 }],
                enabled: d.bottom.visible && !d.front.visible
              }, { fill: m(d.bottom.color).get(), vertexes: [{ x: f2, y: k2, z: n2 }, { x: l2, y: k2, z: n2 }, { x: h2, y: c2, z: b2 }, { x: q, y: c2, z: b2 }], enabled: d.bottom.visible && !d.back.visible }] });
              this.frameShapes.top[r2]({ "class": "highcharts-3d-frame highcharts-3d-frame-top", zIndex: d.top.frontFacing ? -1e3 : 1e3, faces: [
                { fill: m(d.top.color).brighten(0.1).get(), vertexes: [{ x: f2, y: p, z: n2 }, { x: l2, y: p, z: n2 }, { x: l2, y: p, z: t2 }, { x: f2, y: p, z: t2 }], enabled: d.top.visible },
                { fill: m(d.top.color).brighten(0.1).get(), vertexes: [{ x: q, y: g3, z: 0 }, { x: h2, y: g3, z: 0 }, { x: h2, y: g3, z: b2 }, { x: q, y: g3, z: b2 }], enabled: d.top.visible },
                { fill: m(d.top.color).brighten(-0.1).get(), vertexes: [{ x: f2, y: p, z: n2 }, { x: f2, y: p, z: t2 }, { x: q, y: g3, z: 0 }, { x: q, y: g3, z: b2 }], enabled: d.top.visible && !d.left.visible },
                { fill: m(d.top.color).brighten(-0.1).get(), vertexes: [{ x: l2, y: p, z: t2 }, { x: l2, y: p, z: n2 }, { x: h2, y: g3, z: b2 }, { x: h2, y: g3, z: 0 }], enabled: d.top.visible && !d.right.visible },
                { fill: m(d.top.color).get(), vertexes: [{ x: f2, y: p, z: t2 }, { x: l2, y: p, z: t2 }, {
                  x: h2,
                  y: g3,
                  z: 0
                }, { x: q, y: g3, z: 0 }], enabled: d.top.visible && !d.front.visible },
                { fill: m(d.top.color).get(), vertexes: [{ x: l2, y: p, z: n2 }, { x: f2, y: p, z: n2 }, { x: q, y: g3, z: b2 }, { x: h2, y: g3, z: b2 }], enabled: d.top.visible && !d.back.visible }
              ] });
              this.frameShapes.left[r2]({ "class": "highcharts-3d-frame highcharts-3d-frame-left", zIndex: d.left.frontFacing ? -1e3 : 1e3, faces: [
                { fill: m(d.left.color).brighten(0.1).get(), vertexes: [{ x: f2, y: k2, z: t2 }, { x: q, y: c2, z: 0 }, { x: q, y: c2, z: b2 }, { x: f2, y: k2, z: n2 }], enabled: d.left.visible && !d.bottom.visible },
                {
                  fill: m(d.left.color).brighten(0.1).get(),
                  vertexes: [{ x: f2, y: p, z: n2 }, { x: q, y: g3, z: b2 }, { x: q, y: g3, z: 0 }, { x: f2, y: p, z: t2 }],
                  enabled: d.left.visible && !d.top.visible
                },
                { fill: m(d.left.color).brighten(-0.1).get(), vertexes: [{ x: f2, y: k2, z: n2 }, { x: f2, y: p, z: n2 }, { x: f2, y: p, z: t2 }, { x: f2, y: k2, z: t2 }], enabled: d.left.visible },
                { fill: m(d.left.color).brighten(-0.1).get(), vertexes: [{ x: q, y: g3, z: b2 }, { x: q, y: c2, z: b2 }, { x: q, y: c2, z: 0 }, { x: q, y: g3, z: 0 }], enabled: d.left.visible },
                { fill: m(d.left.color).get(), vertexes: [{ x: f2, y: k2, z: t2 }, { x: f2, y: p, z: t2 }, { x: q, y: g3, z: 0 }, { x: q, y: c2, z: 0 }], enabled: d.left.visible && !d.front.visible },
                { fill: m(d.left.color).get(), vertexes: [{ x: f2, y: p, z: n2 }, { x: f2, y: k2, z: n2 }, { x: q, y: c2, z: b2 }, { x: q, y: g3, z: b2 }], enabled: d.left.visible && !d.back.visible }
              ] });
              this.frameShapes.right[r2]({ "class": "highcharts-3d-frame highcharts-3d-frame-right", zIndex: d.right.frontFacing ? -1e3 : 1e3, faces: [{ fill: m(d.right.color).brighten(0.1).get(), vertexes: [{ x: l2, y: k2, z: n2 }, { x: h2, y: c2, z: b2 }, { x: h2, y: c2, z: 0 }, { x: l2, y: k2, z: t2 }], enabled: d.right.visible && !d.bottom.visible }, { fill: m(d.right.color).brighten(0.1).get(), vertexes: [{ x: l2, y: p, z: t2 }, { x: h2, y: g3, z: 0 }, {
                x: h2,
                y: g3,
                z: b2
              }, { x: l2, y: p, z: n2 }], enabled: d.right.visible && !d.top.visible }, { fill: m(d.right.color).brighten(-0.1).get(), vertexes: [{ x: h2, y: g3, z: 0 }, { x: h2, y: c2, z: 0 }, { x: h2, y: c2, z: b2 }, { x: h2, y: g3, z: b2 }], enabled: d.right.visible }, { fill: m(d.right.color).brighten(-0.1).get(), vertexes: [{ x: l2, y: k2, z: t2 }, { x: l2, y: p, z: t2 }, { x: l2, y: p, z: n2 }, { x: l2, y: k2, z: n2 }], enabled: d.right.visible }, { fill: m(d.right.color).get(), vertexes: [{ x: l2, y: p, z: t2 }, { x: l2, y: k2, z: t2 }, { x: h2, y: c2, z: 0 }, { x: h2, y: g3, z: 0 }], enabled: d.right.visible && !d.front.visible }, {
                fill: m(d.right.color).get(),
                vertexes: [{ x: l2, y: k2, z: n2 }, { x: l2, y: p, z: n2 }, { x: h2, y: g3, z: b2 }, { x: h2, y: c2, z: b2 }],
                enabled: d.right.visible && !d.back.visible
              }] });
              this.frameShapes.back[r2]({ "class": "highcharts-3d-frame highcharts-3d-frame-back", zIndex: d.back.frontFacing ? -1e3 : 1e3, faces: [{ fill: m(d.back.color).brighten(0.1).get(), vertexes: [{ x: l2, y: k2, z: n2 }, { x: f2, y: k2, z: n2 }, { x: q, y: c2, z: b2 }, { x: h2, y: c2, z: b2 }], enabled: d.back.visible && !d.bottom.visible }, { fill: m(d.back.color).brighten(0.1).get(), vertexes: [{ x: f2, y: p, z: n2 }, { x: l2, y: p, z: n2 }, { x: h2, y: g3, z: b2 }, { x: q, y: g3, z: b2 }], enabled: d.back.visible && !d.top.visible }, { fill: m(d.back.color).brighten(-0.1).get(), vertexes: [{ x: f2, y: k2, z: n2 }, { x: f2, y: p, z: n2 }, { x: q, y: g3, z: b2 }, { x: q, y: c2, z: b2 }], enabled: d.back.visible && !d.left.visible }, { fill: m(d.back.color).brighten(-0.1).get(), vertexes: [{ x: l2, y: p, z: n2 }, { x: l2, y: k2, z: n2 }, { x: h2, y: c2, z: b2 }, { x: h2, y: g3, z: b2 }], enabled: d.back.visible && !d.right.visible }, { fill: m(d.back.color).get(), vertexes: [{ x: q, y: g3, z: b2 }, { x: h2, y: g3, z: b2 }, { x: h2, y: c2, z: b2 }, { x: q, y: c2, z: b2 }], enabled: d.back.visible }, { fill: m(d.back.color).get(), vertexes: [
                { x: f2, y: k2, z: n2 },
                { x: l2, y: k2, z: n2 },
                { x: l2, y: p, z: n2 },
                { x: f2, y: p, z: n2 }
              ], enabled: d.back.visible }] });
              this.frameShapes.front[r2]({ "class": "highcharts-3d-frame highcharts-3d-frame-front", zIndex: d.front.frontFacing ? -1e3 : 1e3, faces: [{ fill: m(d.front.color).brighten(0.1).get(), vertexes: [{ x: f2, y: k2, z: t2 }, { x: l2, y: k2, z: t2 }, { x: h2, y: c2, z: 0 }, { x: q, y: c2, z: 0 }], enabled: d.front.visible && !d.bottom.visible }, { fill: m(d.front.color).brighten(0.1).get(), vertexes: [{ x: l2, y: p, z: t2 }, { x: f2, y: p, z: t2 }, { x: q, y: g3, z: 0 }, { x: h2, y: g3, z: 0 }], enabled: d.front.visible && !d.top.visible }, {
                fill: m(d.front.color).brighten(-0.1).get(),
                vertexes: [{ x: f2, y: p, z: t2 }, { x: f2, y: k2, z: t2 }, { x: q, y: c2, z: 0 }, { x: q, y: g3, z: 0 }],
                enabled: d.front.visible && !d.left.visible
              }, { fill: m(d.front.color).brighten(-0.1).get(), vertexes: [{ x: l2, y: k2, z: t2 }, { x: l2, y: p, z: t2 }, { x: h2, y: g3, z: 0 }, { x: h2, y: c2, z: 0 }], enabled: d.front.visible && !d.right.visible }, { fill: m(d.front.color).get(), vertexes: [{ x: h2, y: g3, z: 0 }, { x: q, y: g3, z: 0 }, { x: q, y: c2, z: 0 }, { x: h2, y: c2, z: 0 }], enabled: d.front.visible }, { fill: m(d.front.color).get(), vertexes: [{ x: l2, y: k2, z: t2 }, { x: f2, y: k2, z: t2 }, { x: f2, y: p, z: t2 }, { x: l2, y: p, z: t2 }], enabled: d.front.visible }] });
            }
          }
          function v() {
            this.styledMode && [{ name: "darker", slope: 0.6 }, { name: "brighter", slope: 1.4 }].forEach(function(a4) {
              this.renderer.definition({ tagName: "filter", attributes: { id: "highcharts-" + a4.name }, children: [{ tagName: "feComponentTransfer", children: [{ tagName: "feFuncR", attributes: { type: "linear", slope: a4.slope } }, { tagName: "feFuncG", attributes: { type: "linear", slope: a4.slope } }, { tagName: "feFuncB", attributes: { type: "linear", slope: a4.slope } }] }] });
            }, this);
          }
          function n() {
            var a4 = this.options;
            this.is3d() && (a4.series || []).forEach(function(e) {
              "scatter" === (e.type || a4.chart.type || a4.chart.defaultSeriesType) && (e.type = "scatter3d");
            });
          }
          function B() {
            var a4 = this.options.chart.options3d;
            if (this.chart3d && this.is3d()) {
              a4 && (a4.alpha = a4.alpha % 360 + (0 <= a4.alpha ? 0 : 360), a4.beta = a4.beta % 360 + (0 <= a4.beta ? 0 : 360));
              var b2 = this.inverted, d = this.clipBox, h2 = this.margin;
              d[b2 ? "y" : "x"] = -(h2[3] || 0);
              d[b2 ? "x" : "y"] = -(h2[0] || 0);
              d[b2 ? "height" : "width"] = this.chartWidth + (h2[3] || 0) + (h2[1] || 0);
              d[b2 ? "width" : "height"] = this.chartHeight + (h2[0] || 0) + (h2[2] || 0);
              this.scale3d = 1;
              true === a4.fitToPlot && (this.scale3d = this.chart3d.getScale(a4.depth));
              this.chart3d.frame3d = this.chart3d.get3dFrame();
            }
          }
          function E() {
            this.is3d() && (this.isDirtyBox = true);
          }
          function y2() {
            this.chart3d && this.is3d() && (this.chart3d.frame3d = this.chart3d.get3dFrame());
          }
          function z2() {
            this.chart3d || (this.chart3d = new M(this));
          }
          function N(a4) {
            return this.is3d() || a4.apply(this, [].slice.call(arguments, 1));
          }
          function h(a4) {
            var e = this.series.length;
            if (this.is3d())
              for (; e--; )
                a4 = this.series[e], a4.translate(), a4.render();
            else
              a4.call(this);
          }
          function G(a4) {
            a4.apply(this, [].slice.call(arguments, 1));
            this.is3d() && (this.container.className += " highcharts-3d-chart");
          }
          var M = function() {
            function a4(a5) {
              this.frame3d = void 0;
              this.chart = a5;
            }
            a4.prototype.get3dFrame = function() {
              var a5 = this.chart, d = a5.options.chart.options3d, e = d.frame, h2 = a5.plotLeft, g3 = a5.plotLeft + a5.plotWidth, c2 = a5.plotTop, f2 = a5.plotTop + a5.plotHeight, l2 = d.depth, p = function(d2) {
                d2 = C(d2, a5);
                return 0.5 < d2 ? 1 : -0.5 > d2 ? -1 : 0;
              }, k2 = p([{ x: h2, y: f2, z: l2 }, { x: g3, y: f2, z: l2 }, { x: g3, y: f2, z: 0 }, { x: h2, y: f2, z: 0 }]), t2 = p([{ x: h2, y: c2, z: 0 }, { x: g3, y: c2, z: 0 }, { x: g3, y: c2, z: l2 }, { x: h2, y: c2, z: l2 }]), m2 = p([{ x: h2, y: c2, z: 0 }, { x: h2, y: c2, z: l2 }, {
                x: h2,
                y: f2,
                z: l2
              }, { x: h2, y: f2, z: 0 }]), n2 = p([{ x: g3, y: c2, z: l2 }, { x: g3, y: c2, z: 0 }, { x: g3, y: f2, z: 0 }, { x: g3, y: f2, z: l2 }]), G2 = p([{ x: h2, y: f2, z: 0 }, { x: g3, y: f2, z: 0 }, { x: g3, y: c2, z: 0 }, { x: h2, y: c2, z: 0 }]);
              p = p([{ x: h2, y: c2, z: l2 }, { x: g3, y: c2, z: l2 }, { x: g3, y: f2, z: l2 }, { x: h2, y: f2, z: l2 }]);
              var M2 = false, B2 = false, v2 = false, E2 = false;
              [].concat(a5.xAxis, a5.yAxis, a5.zAxis).forEach(function(a6) {
                a6 && (a6.horiz ? a6.opposite ? B2 = true : M2 = true : a6.opposite ? E2 = true : v2 = true);
              });
              var x2 = function(a6, d2, e2) {
                for (var h3 = ["size", "color", "visible"], g4 = {}, c3 = 0; c3 < h3.length; c3++)
                  for (var f3 = h3[c3], l3 = 0; l3 < a6.length; l3++)
                    if ("object" === typeof a6[l3]) {
                      var p2 = a6[l3][f3];
                      if ("undefined" !== typeof p2 && null !== p2) {
                        g4[f3] = p2;
                        break;
                      }
                    }
                a6 = e2;
                true === g4.visible || false === g4.visible ? a6 = g4.visible : "auto" === g4.visible && (a6 = 0 < d2);
                return { size: b(g4.size, 1), color: b(g4.color, "none"), frontFacing: 0 < d2, visible: a6 };
              };
              e = { axes: {}, bottom: x2([e.bottom, e.top, e], k2, M2), top: x2([e.top, e.bottom, e], t2, B2), left: x2([e.left, e.right, e.side, e], m2, v2), right: x2([e.right, e.left, e.side, e], n2, E2), back: x2([e.back, e.front, e], p, true), front: x2([e.front, e.back, e], G2, false) };
              "auto" === d.axisLabelPosition ? (n2 = function(a6, d2) {
                return a6.visible !== d2.visible || a6.visible && d2.visible && a6.frontFacing !== d2.frontFacing;
              }, d = [], n2(e.left, e.front) && d.push({ y: (c2 + f2) / 2, x: h2, z: 0, xDir: { x: 1, y: 0, z: 0 } }), n2(e.left, e.back) && d.push({ y: (c2 + f2) / 2, x: h2, z: l2, xDir: { x: 0, y: 0, z: -1 } }), n2(e.right, e.front) && d.push({ y: (c2 + f2) / 2, x: g3, z: 0, xDir: { x: 0, y: 0, z: 1 } }), n2(e.right, e.back) && d.push({ y: (c2 + f2) / 2, x: g3, z: l2, xDir: { x: -1, y: 0, z: 0 } }), k2 = [], n2(e.bottom, e.front) && k2.push({ x: (h2 + g3) / 2, y: f2, z: 0, xDir: { x: 1, y: 0, z: 0 } }), n2(e.bottom, e.back) && k2.push({ x: (h2 + g3) / 2, y: f2, z: l2, xDir: { x: -1, y: 0, z: 0 } }), t2 = [], n2(e.top, e.front) && t2.push({
                x: (h2 + g3) / 2,
                y: c2,
                z: 0,
                xDir: { x: 1, y: 0, z: 0 }
              }), n2(e.top, e.back) && t2.push({ x: (h2 + g3) / 2, y: c2, z: l2, xDir: { x: -1, y: 0, z: 0 } }), m2 = [], n2(e.bottom, e.left) && m2.push({ z: (0 + l2) / 2, y: f2, x: h2, xDir: { x: 0, y: 0, z: -1 } }), n2(e.bottom, e.right) && m2.push({ z: (0 + l2) / 2, y: f2, x: g3, xDir: { x: 0, y: 0, z: 1 } }), f2 = [], n2(e.top, e.left) && f2.push({ z: (0 + l2) / 2, y: c2, x: h2, xDir: { x: 0, y: 0, z: -1 } }), n2(e.top, e.right) && f2.push({ z: (0 + l2) / 2, y: c2, x: g3, xDir: { x: 0, y: 0, z: 1 } }), h2 = function(d2, e2, h3) {
                if (0 === d2.length)
                  return null;
                if (1 === d2.length)
                  return d2[0];
                for (var b2 = r(d2, a5, false), g4 = 0, c3 = 1; c3 < b2.length; c3++)
                  h3 * b2[c3][e2] > h3 * b2[g4][e2] ? g4 = c3 : h3 * b2[c3][e2] === h3 * b2[g4][e2] && b2[c3].z < b2[g4].z && (g4 = c3);
                return d2[g4];
              }, e.axes = { y: { left: h2(d, "x", -1), right: h2(d, "x", 1) }, x: { top: h2(t2, "y", -1), bottom: h2(k2, "y", 1) }, z: { top: h2(f2, "y", -1), bottom: h2(m2, "y", 1) } }) : e.axes = { y: { left: { x: h2, z: 0, xDir: { x: 1, y: 0, z: 0 } }, right: { x: g3, z: 0, xDir: { x: 0, y: 0, z: 1 } } }, x: { top: { y: c2, z: 0, xDir: { x: 1, y: 0, z: 0 } }, bottom: { y: f2, z: 0, xDir: { x: 1, y: 0, z: 0 } } }, z: { top: { x: v2 ? g3 : h2, y: c2, xDir: v2 ? { x: 0, y: 0, z: 1 } : { x: 0, y: 0, z: -1 } }, bottom: { x: v2 ? g3 : h2, y: f2, xDir: v2 ? { x: 0, y: 0, z: 1 } : { x: 0, y: 0, z: -1 } } } };
              return e;
            };
            a4.prototype.getScale = function(a5) {
              var d = this.chart, e = d.plotLeft, h2 = d.plotWidth + e, b2 = d.plotTop, g3 = d.plotHeight + b2, c2 = e + d.plotWidth / 2, f2 = b2 + d.plotHeight / 2, l2 = Number.MAX_VALUE, p = -Number.MAX_VALUE, k2 = Number.MAX_VALUE, t2 = -Number.MAX_VALUE, n2 = 1;
              var m2 = [{ x: e, y: b2, z: 0 }, { x: e, y: b2, z: a5 }];
              [0, 1].forEach(function(a6) {
                m2.push({ x: h2, y: m2[a6].y, z: m2[a6].z });
              });
              [0, 1, 2, 3].forEach(function(a6) {
                m2.push({ x: m2[a6].x, y: g3, z: m2[a6].z });
              });
              m2 = r(m2, d, false);
              m2.forEach(function(a6) {
                l2 = Math.min(l2, a6.x);
                p = Math.max(p, a6.x);
                k2 = Math.min(k2, a6.y);
                t2 = Math.max(t2, a6.y);
              });
              e > l2 && (n2 = Math.min(n2, 1 - Math.abs((e + c2) / (l2 + c2)) % 1));
              h2 < p && (n2 = Math.min(n2, (h2 - c2) / (p - c2)));
              b2 > k2 && (n2 = 0 > k2 ? Math.min(n2, (b2 + f2) / (-k2 + b2 + f2)) : Math.min(n2, 1 - (b2 + f2) / (k2 + f2) % 1));
              g3 < t2 && (n2 = Math.min(n2, Math.abs((g3 - f2) / (t2 - f2))));
              return n2;
            };
            return a4;
          }();
          a3.Composition = M;
          a3.defaultOptions = { chart: { options3d: { enabled: false, alpha: 0, beta: 0, depth: 100, fitToPlot: true, viewDistance: 25, axisLabelPosition: null, frame: { visible: "default", size: 1, bottom: {}, top: {}, left: {}, right: {}, back: {}, front: {} } } } };
          a3.compose = function(e, b2) {
            var d = e.prototype;
            b2 = b2.prototype;
            d.is3d = function() {
              return !(!this.options.chart.options3d || !this.options.chart.options3d.enabled);
            };
            d.propsRequireDirtyBox.push("chart.options3d");
            d.propsRequireUpdateSeries.push("chart.options3d");
            b2.matrixSetter = function() {
              if (1 > this.pos && (k(this.start) || k(this.end))) {
                var a4 = this.start || [1, 0, 0, 1, 0, 0], d2 = this.end || [1, 0, 0, 1, 0, 0];
                var e2 = [];
                for (var h2 = 0; 6 > h2; h2++)
                  e2.push(this.pos * d2[h2] + (1 - this.pos) * a4[h2]);
              } else
                e2 = this.end;
              this.elem.attr(this.prop, e2, null, true);
            };
            c(true, x, a3.defaultOptions);
            f(e, "init", z2);
            f(e, "addSeries", g2);
            f(e, "afterDrawChartBox", t);
            f(e, "afterGetContainer", v);
            f(e, "afterInit", n);
            f(e, "afterSetChartSize", B);
            f(e, "beforeRedraw", E);
            f(e, "beforeRender", y2);
            l(d, "isInsidePlot", N);
            l(d, "renderSeries", h);
            l(d, "setClassName", G);
          };
        })(g || (g = {}));
        "";
        return g;
      });
      F(a, "Core/Axis/ZAxis.js", [a["Core/Axis/Axis.js"], a["Core/Utilities.js"]], function(a2, z) {
        function x(a3) {
          return new c(this, a3);
        }
        function D() {
          var a3 = this, c2 = this.options.zAxis = f(this.options.zAxis || {});
          this.is3d() && (this.zAxis = [], c2.forEach(function(b, c3) {
            b.index = c3;
            b.isX = true;
            a3.addZAxis(b).setScale();
          }));
        }
        var m = this && this.__extends || function() {
          var a3 = function(b, c2) {
            a3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a4, b2) {
              a4.__proto__ = b2;
            } || function(a4, b2) {
              for (var c3 in b2)
                b2.hasOwnProperty(c3) && (a4[c3] = b2[c3]);
            };
            return a3(b, c2);
          };
          return function(b, c2) {
            function g() {
              this.constructor = b;
            }
            a3(b, c2);
            b.prototype = null === c2 ? Object.create(c2) : (g.prototype = c2.prototype, new g());
          };
        }(), H = z.addEvent, r = z.merge, C = z.pick, f = z.splat, k = [], c = function(a3) {
          function b(b2, c2) {
            b2 = a3.call(this, b2, c2) || this;
            b2.isZAxis = true;
            return b2;
          }
          m(b, a3);
          b.compose = function(a4) {
            -1 === k.indexOf(a4) && (k.push(a4), H(a4, "afterGetAxes", D), a4 = a4.prototype, a4.addZAxis = x, a4.collectionsWithInit.zAxis = [a4.addZAxis], a4.collectionsWithUpdate.push("zAxis"));
          };
          b.prototype.getSeriesExtremes = function() {
            var a4 = this, b2 = this.chart;
            this.hasVisibleSeries = false;
            this.dataMin = this.dataMax = this.ignoreMinPadding = this.ignoreMaxPadding = void 0;
            this.stacking && this.stacking.buildStacks();
            this.series.forEach(function(c2) {
              if (c2.visible || !b2.options.chart.ignoreHiddenSeries)
                a4.hasVisibleSeries = true, c2 = c2.zData, c2.length && (a4.dataMin = Math.min(C(
                  a4.dataMin,
                  c2[0]
                ), Math.min.apply(null, c2)), a4.dataMax = Math.max(C(a4.dataMax, c2[0]), Math.max.apply(null, c2)));
            });
          };
          b.prototype.setAxisSize = function() {
            var b2 = this.chart;
            a3.prototype.setAxisSize.call(this);
            this.width = this.len = b2.options.chart.options3d && b2.options.chart.options3d.depth || 0;
            this.right = b2.chartWidth - this.width - this.left;
          };
          b.prototype.setOptions = function(b2) {
            b2 = r({ offset: 0, lineWidth: 0 }, b2);
            this.isZAxis = true;
            a3.prototype.setOptions.call(this, b2);
            this.coll = "zAxis";
          };
          return b;
        }(a2);
        return c;
      });
      F(
        a,
        "Core/Axis/Axis3DDefaults.js",
        [],
        function() {
          return { labels: { position3d: "offset", skew3d: false }, title: { position3d: null, skew3d: null } };
        }
      );
      F(a, "Core/Axis/Tick3DComposition.js", [a["Core/Utilities.js"]], function(a2) {
        function x(a3) {
          var f = this.axis.axis3D;
          f && m(a3.pos, f.fix3dPosition(a3.pos));
        }
        function y(a3) {
          var f = this.axis.axis3D, k = a3.apply(this, [].slice.call(arguments, 1));
          if (f) {
            var c = k[0], b = k[1];
            if ("M" === c[0] && "L" === b[0])
              return f = [f.fix3dPosition({ x: c[1], y: c[2], z: 0 }), f.fix3dPosition({ x: b[1], y: b[2], z: 0 })], this.axis.chart.renderer.toLineSegments(f);
          }
          return k;
        }
        var D = a2.addEvent, m = a2.extend, H = a2.wrap, r = [];
        return { compose: function(a3) {
          -1 === r.indexOf(a3) && (r.push(a3), D(a3, "afterGetLabelPosition", x), H(a3.prototype, "getMarkPath", y));
        } };
      });
      F(a, "Core/Axis/Axis3DComposition.js", [a["Core/Axis/Axis3DDefaults.js"], a["Core/Globals.js"], a["Core/Math3D.js"], a["Core/Axis/Tick3DComposition.js"], a["Core/Utilities.js"]], function(a2, z, y, D, m) {
        function x() {
          var a3 = this.chart, b2 = this.options;
          a3.is3d && a3.is3d() && "colorAxis" !== this.coll && (b2.tickWidth = L(b2.tickWidth, 0), b2.gridLineWidth = L(
            b2.gridLineWidth,
            1
          ));
        }
        function r(a3) {
          this.chart.is3d() && "colorAxis" !== this.coll && a3.point && (a3.point.crosshairPos = this.isXAxis ? a3.point.axisXpos : this.len - a3.point.axisYpos);
        }
        function C() {
          this.axis3D || (this.axis3D = new K(this));
        }
        function f(a3) {
          return this.chart.is3d() && "colorAxis" !== this.coll ? [] : a3.apply(this, [].slice.call(arguments, 1));
        }
        function k(a3) {
          if (!this.chart.is3d() || "colorAxis" === this.coll)
            return a3.apply(this, [].slice.call(arguments, 1));
          var b2 = arguments, c2 = b2[2], f2 = [];
          b2 = this.getPlotLinePath({ value: b2[1] });
          c2 = this.getPlotLinePath({ value: c2 });
          if (b2 && c2)
            for (var e = 0; e < b2.length; e += 2) {
              var g2 = b2[e], d = b2[e + 1], l2 = c2[e], k2 = c2[e + 1];
              "M" === g2[0] && "L" === d[0] && "M" === l2[0] && "L" === k2[0] && f2.push(g2, d, k2, ["L", l2[1], l2[2]], ["Z"]);
            }
          return f2;
        }
        function c(a3) {
          var b2 = this.axis3D, c2 = this.chart, f2 = a3.apply(this, [].slice.call(arguments, 1));
          if ("colorAxis" === this.coll || !c2.chart3d || !c2.is3d() || null === f2)
            return f2;
          var e = c2.options.chart.options3d, g2 = this.isZAxis ? c2.plotWidth : e.depth;
          e = c2.chart3d.frame3d;
          var d = f2[0], l2 = f2[1];
          f2 = [];
          "M" === d[0] && "L" === l2[0] && (b2 = [b2.swapZ({ x: d[1], y: d[2], z: 0 }), b2.swapZ({
            x: d[1],
            y: d[2],
            z: g2
          }), b2.swapZ({ x: l2[1], y: l2[2], z: 0 }), b2.swapZ({ x: l2[1], y: l2[2], z: g2 })], this.horiz ? (this.isZAxis ? (e.left.visible && f2.push(b2[0], b2[2]), e.right.visible && f2.push(b2[1], b2[3])) : (e.front.visible && f2.push(b2[0], b2[2]), e.back.visible && f2.push(b2[1], b2[3])), e.top.visible && f2.push(b2[0], b2[1]), e.bottom.visible && f2.push(b2[2], b2[3])) : (e.front.visible && f2.push(b2[0], b2[2]), e.back.visible && f2.push(b2[1], b2[3]), e.left.visible && f2.push(b2[0], b2[1]), e.right.visible && f2.push(b2[2], b2[3])), f2 = B(f2, this.chart, false));
          return c2.renderer.toLineSegments(f2);
        }
        function b(a3, b2) {
          var c2 = this.chart, h = this.ticks, e = this.gridGroup;
          if (this.categories && c2.frameShapes && c2.is3d() && e && b2 && b2.label) {
            e = e.element.childNodes[0].getBBox();
            var f2 = c2.frameShapes.left.getBBox(), d = c2.options.chart.options3d;
            c2 = { x: c2.plotWidth / 2, y: c2.plotHeight / 2, z: d.depth / 2, vd: L(d.depth, 1) * L(d.viewDistance, 0) };
            d = b2.pos;
            var g2 = h[d - 1], l2 = h[d + 1], k2 = h = void 0;
            0 !== d && g2 && g2.label && g2.label.xy && (h = p({ x: g2.label.xy.x, y: g2.label.xy.y, z: null }, c2, c2.vd));
            l2 && l2.label && l2.label.xy && (k2 = p(
              { x: l2.label.xy.x, y: l2.label.xy.y, z: null },
              c2,
              c2.vd
            ));
            d = { x: b2.label.xy.x, y: b2.label.xy.y, z: null };
            d = p(d, c2, c2.vd);
            return Math.abs(h ? d.x - h.x : k2 ? k2.x - d.x : e.x - f2.x);
          }
          return a3.apply(this, [].slice.call(arguments, 1));
        }
        function l(a3) {
          var b2 = a3.apply(this, [].slice.call(arguments, 1));
          return this.axis3D ? this.axis3D.fix3dPosition(b2, true) : b2;
        }
        var g = z.deg2rad, B = y.perspective, p = y.perspective3D, t = y.shapeArea, v = m.addEvent, n = m.merge, L = m.pick, E = m.wrap, J = [], K = function() {
          function p2(a3) {
            this.axis = a3;
          }
          p2.compose = function(h, g2) {
            D.compose(g2);
            -1 === J.indexOf(h) && (J.push(h), n(
              true,
              h.defaultOptions,
              a2
            ), h.keepProps.push("axis3D"), v(h, "init", C), v(h, "afterSetOptions", x), v(h, "drawCrosshair", r), h = h.prototype, E(h, "getLinePath", f), E(h, "getPlotBandPath", k), E(h, "getPlotLinePath", c), E(h, "getSlotWidth", b), E(h, "getTitlePosition", l));
          };
          p2.prototype.fix3dPosition = function(a3, b2) {
            var c2 = this.axis, e = c2.chart;
            if ("colorAxis" === c2.coll || !e.chart3d || !e.is3d())
              return a3;
            var f2 = g * e.options.chart.options3d.alpha, d = g * e.options.chart.options3d.beta, h = L(b2 && c2.options.title.position3d, c2.options.labels.position3d);
            b2 = L(
              b2 && c2.options.title.skew3d,
              c2.options.labels.skew3d
            );
            var l2 = e.chart3d.frame3d, k2 = e.plotLeft, p3 = e.plotWidth + k2, n2 = e.plotTop, m2 = e.plotHeight + n2, r2 = e = 0, v2 = { x: 0, y: 1, z: 0 }, E2 = false;
            a3 = c2.axis3D.swapZ({ x: a3.x, y: a3.y, z: 0 });
            if (c2.isZAxis)
              if (c2.opposite) {
                if (null === l2.axes.z.top)
                  return {};
                r2 = a3.y - n2;
                a3.x = l2.axes.z.top.x;
                a3.y = l2.axes.z.top.y;
                k2 = l2.axes.z.top.xDir;
                E2 = !l2.top.frontFacing;
              } else {
                if (null === l2.axes.z.bottom)
                  return {};
                r2 = a3.y - m2;
                a3.x = l2.axes.z.bottom.x;
                a3.y = l2.axes.z.bottom.y;
                k2 = l2.axes.z.bottom.xDir;
                E2 = !l2.bottom.frontFacing;
              }
            else if (c2.horiz)
              if (c2.opposite) {
                if (null === l2.axes.x.top)
                  return {};
                r2 = a3.y - n2;
                a3.y = l2.axes.x.top.y;
                a3.z = l2.axes.x.top.z;
                k2 = l2.axes.x.top.xDir;
                E2 = !l2.top.frontFacing;
              } else {
                if (null === l2.axes.x.bottom)
                  return {};
                r2 = a3.y - m2;
                a3.y = l2.axes.x.bottom.y;
                a3.z = l2.axes.x.bottom.z;
                k2 = l2.axes.x.bottom.xDir;
                E2 = !l2.bottom.frontFacing;
              }
            else if (c2.opposite) {
              if (null === l2.axes.y.right)
                return {};
              e = a3.x - p3;
              a3.x = l2.axes.y.right.x;
              a3.z = l2.axes.y.right.z;
              k2 = l2.axes.y.right.xDir;
              k2 = { x: k2.z, y: k2.y, z: -k2.x };
            } else {
              if (null === l2.axes.y.left)
                return {};
              e = a3.x - k2;
              a3.x = l2.axes.y.left.x;
              a3.z = l2.axes.y.left.z;
              k2 = l2.axes.y.left.xDir;
            }
            "chart" !== h && ("flap" === h ? c2.horiz ? (d = Math.sin(f2), f2 = Math.cos(f2), c2.opposite && (d = -d), E2 && (d = -d), v2 = { x: k2.z * d, y: f2, z: -k2.x * d }) : k2 = { x: Math.cos(d), y: 0, z: Math.sin(d) } : "ortho" === h ? c2.horiz ? (v2 = Math.cos(f2), h = Math.sin(d) * v2, f2 = -Math.sin(f2), d = -v2 * Math.cos(d), v2 = { x: k2.y * d - k2.z * f2, y: k2.z * h - k2.x * d, z: k2.x * f2 - k2.y * h }, f2 = 1 / Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z), E2 && (f2 = -f2), v2 = { x: f2 * v2.x, y: f2 * v2.y, z: f2 * v2.z }) : k2 = { x: Math.cos(d), y: 0, z: Math.sin(d) } : c2.horiz ? v2 = { x: Math.sin(d) * Math.sin(f2), y: Math.cos(f2), z: -Math.cos(d) * Math.sin(f2) } : k2 = { x: Math.cos(d), y: 0, z: Math.sin(d) });
            a3.x += e * k2.x + r2 * v2.x;
            a3.y += e * k2.y + r2 * v2.y;
            a3.z += e * k2.z + r2 * v2.z;
            e = B([a3], c2.chart)[0];
            b2 && (0 > t(B([a3, { x: a3.x + k2.x, y: a3.y + k2.y, z: a3.z + k2.z }, { x: a3.x + v2.x, y: a3.y + v2.y, z: a3.z + v2.z }], c2.chart)) && (k2 = { x: -k2.x, y: -k2.y, z: -k2.z }), a3 = B([{ x: a3.x, y: a3.y, z: a3.z }, { x: a3.x + k2.x, y: a3.y + k2.y, z: a3.z + k2.z }, { x: a3.x + v2.x, y: a3.y + v2.y, z: a3.z + v2.z }], c2.chart), e.matrix = [a3[1].x - a3[0].x, a3[1].y - a3[0].y, a3[2].x - a3[0].x, a3[2].y - a3[0].y, e.x, e.y], e.matrix[4] -= e.x * e.matrix[0] + e.y * e.matrix[2], e.matrix[5] -= e.x * e.matrix[1] + e.y * e.matrix[3]);
            return e;
          };
          p2.prototype.swapZ = function(a3, b2) {
            var c2 = this.axis;
            return c2.isZAxis ? (b2 = b2 ? 0 : c2.chart.plotLeft, { x: b2 + a3.z, y: a3.y, z: a3.x - b2 }) : a3;
          };
          return p2;
        }();
        return K;
      });
      F(a, "Core/Series/Series3D.js", [a["Core/Math3D.js"], a["Core/Series/Series.js"], a["Core/Utilities.js"]], function(a2, z, y) {
        var x = this && this.__extends || function() {
          var a3 = function(c, b) {
            a3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a4, b2) {
              a4.__proto__ = b2;
            } || function(a4, b2) {
              for (var c2 in b2)
                b2.hasOwnProperty(c2) && (a4[c2] = b2[c2]);
            };
            return a3(c, b);
          };
          return function(c, b) {
            function f2() {
              this.constructor = c;
            }
            a3(c, b);
            c.prototype = null === b ? Object.create(b) : (f2.prototype = b.prototype, new f2());
          };
        }(), m = a2.perspective;
        a2 = y.addEvent;
        var H = y.extend, r = y.merge, C = y.pick, f = y.isNumber;
        y = function(a3) {
          function c() {
            return null !== a3 && a3.apply(this, arguments) || this;
          }
          x(c, a3);
          c.prototype.translate = function() {
            a3.prototype.translate.apply(this, arguments);
            this.chart.is3d() && this.translate3dPoints();
          };
          c.prototype.translate3dPoints = function() {
            var a4 = this.options, c2 = this.chart, g = C(this.zAxis, c2.options.zAxis[0]), k = [], p, t = [];
            this.zPadding = (a4.stacking ? f(a4.stack) ? a4.stack : 0 : this.index || 0) * (a4.depth || 0 + (a4.groupZPadding || 1));
            for (p = 0; p < this.data.length; p++) {
              a4 = this.data[p];
              if (g && g.translate) {
                var v = g.logarithmic && g.val2lin ? g.val2lin(a4.z) : a4.z;
                a4.plotZ = g.translate(v);
                a4.isInside = a4.isInside ? v >= g.min && v <= g.max : false;
              } else
                a4.plotZ = this.zPadding;
              a4.axisXpos = a4.plotX;
              a4.axisYpos = a4.plotY;
              a4.axisZpos = a4.plotZ;
              k.push({ x: a4.plotX, y: a4.plotY, z: a4.plotZ });
              t.push(a4.plotX || 0);
            }
            this.rawPointsX = t;
            c2 = m(k, c2, true);
            for (p = 0; p < this.data.length; p++)
              a4 = this.data[p], g = c2[p], a4.plotX = g.x, a4.plotY = g.y, a4.plotZ = g.z;
          };
          c.defaultOptions = r(z.defaultOptions);
          return c;
        }(z);
        a2(z, "afterTranslate", function() {
          this.chart.is3d() && this.translate3dPoints();
        });
        H(z.prototype, { translate3dPoints: y.prototype.translate3dPoints });
        return y;
      });
      F(a, "Series/Area3D/Area3DSeries.js", [a["Core/Math3D.js"], a["Core/Series/SeriesRegistry.js"], a["Core/Utilities.js"]], function(a2, z, y) {
        function x(a3) {
          var f = a3.apply(this, [].slice.call(arguments, 1));
          if (!this.chart.is3d())
            return f;
          var c = H.getGraphPath, b = this.options, l = Math.round(this.yAxis.getThreshold(b.threshold)), g = [];
          if (this.rawPointsX)
            for (var r2 = 0; r2 < this.points.length; r2++)
              g.push({ x: this.rawPointsX[r2], y: b.stacking ? this.points[r2].yBottom : l, z: this.zPadding });
          b = this.chart.options.chart.options3d;
          g = m(g, this.chart, true).map(function(a4) {
            return { plotX: a4.x, plotY: a4.y, plotZ: a4.z };
          });
          this.group && b && b.depth && b.beta && (this.markerGroup && (this.markerGroup.add(this.group), this.markerGroup.attr({ translateX: 0, translateY: 0 })), this.group.attr({ zIndex: Math.max(1, 270 < b.beta || 90 > b.beta ? b.depth - Math.round(this.zPadding || 0) : Math.round(this.zPadding || 0)) }));
          g.reversed = true;
          c = c.call(this, g, true, true);
          c[0] && "M" === c[0][0] && (c[0] = ["L", c[0][1], c[0][2]]);
          this.areaPath && (c = this.areaPath.splice(0, this.areaPath.length / 2).concat(c), c.xMap = this.areaPath.xMap, this.areaPath = c);
          return f;
        }
        var m = a2.perspective, H = z.seriesTypes.line.prototype, r = y.wrap, C = [];
        return { compose: function(a3) {
          -1 === C.indexOf(a3) && (C.push(a3), r(a3.prototype, "getGraphPath", x));
        } };
      });
      F(a, "Series/Column3D/Column3DComposition.js", [
        a["Series/Column/ColumnSeries.js"],
        a["Core/Globals.js"],
        a["Core/Series/Series.js"],
        a["Core/Math3D.js"],
        a["Core/Series/SeriesRegistry.js"],
        a["Core/Axis/Stacking/StackItem.js"],
        a["Core/Utilities.js"]
      ], function(a2, z, y, D, m, H, r) {
        function x(a3, b2) {
          var c2 = a3.series, f2 = { totalStacks: 0 }, g2, l2 = 1;
          c2.forEach(function(a4) {
            g2 = B(a4.options.stack, b2 ? 0 : c2.length - 1 - a4.index);
            f2[g2] ? f2[g2].series.push(a4) : (f2[g2] = { series: [a4], position: l2 }, l2++);
          });
          f2.totalStacks = l2 + 1;
          return f2;
        }
        function f(a3) {
          var b2 = a3.apply(this, [].slice.call(arguments, 1));
          this.chart.is3d && this.chart.is3d() && (b2.stroke = this.options.edgeColor || b2.fill, b2["stroke-width"] = B(
            this.options.edgeWidth,
            1
          ));
          return b2;
        }
        function k(a3, b2, c2) {
          var f2 = this.chart.is3d && this.chart.is3d();
          f2 && (this.options.inactiveOtherPoints = true);
          a3.call(this, b2, c2);
          f2 && (this.options.inactiveOtherPoints = false);
        }
        function c(a3) {
          for (var b2 = [], c2 = 1; c2 < arguments.length; c2++)
            b2[c2 - 1] = arguments[c2];
          return this.series.chart.is3d() ? this.graphic && "g" !== this.graphic.element.nodeName : a3.apply(this, b2);
        }
        var b = a2.prototype, l = z.svg, g = D.perspective;
        z = r.addEvent;
        var B = r.pick;
        r = r.wrap;
        r(b, "translate", function(a3) {
          a3.apply(this, [].slice.call(arguments, 1));
          this.chart.is3d() && this.translate3dShapes();
        });
        r(y.prototype, "justifyDataLabel", function(a3) {
          return arguments[2].outside3dPlot ? false : a3.apply(this, [].slice.call(arguments, 1));
        });
        b.translate3dPoints = function() {
        };
        b.translate3dShapes = function() {
          var a3 = this, b2 = a3.chart, c2 = a3.options, f2 = c2.depth, l2 = (c2.stacking ? c2.stack || 0 : a3.index) * (f2 + (c2.groupZPadding || 1)), k2 = a3.borderWidth % 2 ? 0.5 : 0, m2;
          b2.inverted && !a3.yAxis.reversed && (k2 *= -1);
          false !== c2.grouping && (l2 = 0);
          l2 += c2.groupZPadding || 1;
          a3.data.forEach(function(c3) {
            c3.outside3dPlot = null;
            if (null !== c3.y) {
              var n = c3.shapeArgs, h = c3.tooltipPos, p;
              [["x", "width"], ["y", "height"]].forEach(function(b3) {
                p = n[b3[0]] - k2;
                0 > p && (n[b3[1]] += n[b3[0]] + k2, n[b3[0]] = -k2, p = 0);
                p + n[b3[1]] > a3[b3[0] + "Axis"].len && 0 !== n[b3[1]] && (n[b3[1]] = a3[b3[0] + "Axis"].len - n[b3[0]]);
                if (0 !== n[b3[1]] && (n[b3[0]] >= a3[b3[0] + "Axis"].len || n[b3[0]] + n[b3[1]] <= k2)) {
                  for (var e in n)
                    n[e] = "y" === e ? -9999 : 0;
                  c3.outside3dPlot = true;
                }
              });
              "rect" === c3.shapeType && (c3.shapeType = "cuboid");
              n.z = l2;
              n.depth = f2;
              n.insidePlotArea = true;
              m2 = { x: n.x + n.width / 2, y: n.y, z: l2 + f2 / 2 };
              b2.inverted && (m2.x = n.height, m2.y = c3.clientX);
              c3.plot3d = g(
                [m2],
                b2,
                true,
                false
              )[0];
              h = g([{ x: h[0], y: h[1], z: l2 + f2 / 2 }], b2, true, false)[0];
              c3.tooltipPos = [h.x, h.y];
            }
          });
          a3.z = l2;
        };
        r(b, "animate", function(a3) {
          if (this.chart.is3d()) {
            var b2 = arguments[1], c2 = this.yAxis, f2 = this, g2 = this.yAxis.reversed;
            l && (b2 ? f2.data.forEach(function(a4) {
              null !== a4.y && (a4.height = a4.shapeArgs.height, a4.shapey = a4.shapeArgs.y, a4.shapeArgs.height = 1, g2 || (a4.shapeArgs.y = a4.stackY ? a4.plotY + c2.translate(a4.stackY) : a4.plotY + (a4.negative ? -a4.height : a4.height)));
            }) : (f2.data.forEach(function(a4) {
              if (null !== a4.y && (a4.shapeArgs.height = a4.height, a4.shapeArgs.y = a4.shapey, a4.graphic))
                a4.graphic[a4.outside3dPlot ? "attr" : "animate"](a4.shapeArgs, f2.options.animation);
            }), this.drawDataLabels()));
          } else
            a3.apply(this, [].slice.call(arguments, 1));
        });
        r(b, "plotGroup", function(a3, b2, c2, f2, g2, l2) {
          "dataLabelsGroup" !== b2 && this.chart.is3d() && (this[b2] && delete this[b2], l2 && (this.chart.columnGroup || (this.chart.columnGroup = this.chart.renderer.g("columnGroup").add(l2)), this[b2] = this.chart.columnGroup, this.chart.columnGroup.attr(this.getPlotBox()), this[b2].survive = true, "group" === b2 || "markerGroup" === b2)) && (arguments[3] = "visible");
          return a3.apply(this, Array.prototype.slice.call(arguments, 1));
        });
        r(b, "setVisible", function(a3, b2) {
          var c2 = this;
          c2.chart.is3d() && c2.data.forEach(function(a4) {
            a4.visible = a4.options.visible = b2 = "undefined" === typeof b2 ? !B(c2.visible, a4.visible) : b2;
            c2.options.data[c2.data.indexOf(a4)] = a4.options;
            a4.graphic && a4.graphic.attr({ visibility: b2 ? "visible" : "hidden" });
          });
          a3.apply(this, Array.prototype.slice.call(arguments, 1));
        });
        z(a2, "afterInit", function() {
          if (this.chart.is3d()) {
            var a3 = this.options, b2 = a3.grouping, c2 = a3.stacking, f2 = this.yAxis.options.reversedStacks, g2 = 0;
            if ("undefined" === typeof b2 || b2) {
              b2 = x(this.chart, c2);
              g2 = a3.stack || 0;
              for (c2 = 0; c2 < b2[g2].series.length && b2[g2].series[c2] !== this; c2++)
                ;
              g2 = 10 * (b2.totalStacks - b2[g2].position) + (f2 ? c2 : -c2);
              this.xAxis.reversed || (g2 = 10 * b2.totalStacks - g2);
            }
            a3.depth = a3.depth || 25;
            this.z = this.z || 0;
            a3.zIndex = g2;
          }
        });
        r(b, "pointAttribs", f);
        r(b, "setState", k);
        r(b.pointClass.prototype, "hasNewShapeType", c);
        m.seriesTypes.columnRange && (z = m.seriesTypes.columnrange.prototype, r(z, "pointAttribs", f), r(z, "setState", k), r(z.pointClass.prototype, "hasNewShapeType", c), z.plotGroup = b.plotGroup, z.setVisible = b.setVisible);
        r(y.prototype, "alignDataLabel", function(a3, b2, c2, f2, l2) {
          var k2 = this.chart;
          f2.outside3dPlot = b2.outside3dPlot;
          if (k2.is3d() && this.is("column")) {
            var m2 = this.options, n = B(f2.inside, !!this.options.stacking), p = k2.options.chart.options3d, h = b2.pointWidth / 2 || 0;
            m2 = { x: l2.x + h, y: l2.y, z: this.z + m2.depth / 2 };
            k2.inverted && (n && (l2.width = 0, m2.x += b2.shapeArgs.height / 2), 90 <= p.alpha && 270 >= p.alpha && (m2.y += b2.shapeArgs.width));
            m2 = g([m2], k2, true, false)[0];
            l2.x = m2.x - h;
            l2.y = b2.outside3dPlot ? -9e9 : m2.y;
          }
          a3.apply(this, [].slice.call(
            arguments,
            1
          ));
        });
        r(H.prototype, "getStackBox", function(a3, b2, c2, f2, l2, k2, r2, x2) {
          var n = a3.apply(this, [].slice.call(arguments, 1));
          if (b2.is3d() && c2.base) {
            var h = +c2.base.split(",")[0], p = b2.series[h];
            h = b2.options.chart.options3d;
            p && p instanceof m.seriesTypes.column && (p = { x: n.x + (b2.inverted ? r2 : k2 / 2), y: n.y, z: p.options.depth / 2 }, b2.inverted && (n.width = 0, 90 <= h.alpha && 270 >= h.alpha && (p.y += k2)), p = g([p], b2, true, false)[0], n.x = p.x - k2 / 2, n.y = p.y);
          }
          return n;
        });
        "";
        return a2;
      });
      F(a, "Series/Pie3D/Pie3DPoint.js", [a["Core/Series/SeriesRegistry.js"]], function(a2) {
        var x = this && this.__extends || function() {
          var a3 = function(m, x2) {
            a3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a4, m2) {
              a4.__proto__ = m2;
            } || function(a4, m2) {
              for (var f in m2)
                m2.hasOwnProperty(f) && (a4[f] = m2[f]);
            };
            return a3(m, x2);
          };
          return function(m, x2) {
            function r() {
              this.constructor = m;
            }
            a3(m, x2);
            m.prototype = null === x2 ? Object.create(x2) : (r.prototype = x2.prototype, new r());
          };
        }();
        a2 = a2.seriesTypes.pie.prototype.pointClass;
        var y = a2.prototype.haloPath;
        return function(a3) {
          function m() {
            var m2 = null !== a3 && a3.apply(this, arguments) || this;
            m2.series = void 0;
            return m2;
          }
          x(m, a3);
          m.prototype.haloPath = function() {
            return this.series.chart.is3d() ? [] : y.apply(this, arguments);
          };
          return m;
        }(a2);
      });
      F(a, "Series/Pie3D/Pie3DSeries.js", [a["Core/Globals.js"], a["Series/Pie3D/Pie3DPoint.js"], a["Core/Series/SeriesRegistry.js"], a["Core/Utilities.js"]], function(a2, z, y, D) {
        var m = this && this.__extends || function() {
          var a3 = function(f, c) {
            a3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a4, c2) {
              a4.__proto__ = c2;
            } || function(a4, c2) {
              for (var b in c2)
                c2.hasOwnProperty(b) && (a4[b] = c2[b]);
            };
            return a3(f, c);
          };
          return function(f, c) {
            function b() {
              this.constructor = f;
            }
            a3(f, c);
            f.prototype = null === c ? Object.create(c) : (b.prototype = c.prototype, new b());
          };
        }(), x = a2.deg2rad, r = a2.svg;
        a2 = D.extend;
        var C = D.pick;
        y = function(a3) {
          function f() {
            return null !== a3 && a3.apply(this, arguments) || this;
          }
          m(f, a3);
          f.prototype.addPoint = function() {
            a3.prototype.addPoint.apply(this, arguments);
            this.chart.is3d() && this.update(this.userOptions, true);
          };
          f.prototype.animate = function(c) {
            if (this.chart.is3d()) {
              var b = this.options.animation;
              var f2 = this.center;
              var g = this.group, k = this.markerGroup;
              r && (true === b && (b = {}), c ? (g.oldtranslateX = C(g.oldtranslateX, g.translateX), g.oldtranslateY = C(g.oldtranslateY, g.translateY), f2 = { translateX: f2[0], translateY: f2[1], scaleX: 1e-3, scaleY: 1e-3 }, g.attr(f2), k && (k.attrSetters = g.attrSetters, k.attr(f2))) : (f2 = { translateX: g.oldtranslateX, translateY: g.oldtranslateY, scaleX: 1, scaleY: 1 }, g.animate(f2, b), k && k.animate(f2, b)));
            } else
              a3.prototype.animate.apply(this, arguments);
          };
          f.prototype.drawDataLabels = function() {
            if (this.chart.is3d()) {
              var c = this.chart.options.chart.options3d;
              this.data.forEach(function(a4) {
                var b = a4.shapeArgs, f2 = b.r, k = (b.start + b.end) / 2;
                a4 = a4.labelPosition;
                var m2 = a4.connectorPosition, r2 = -f2 * (1 - Math.cos((b.alpha || c.alpha) * x)) * Math.sin(k), v = f2 * (Math.cos((b.beta || c.beta) * x) - 1) * Math.cos(k);
                [a4.natural, m2.breakAt, m2.touchingSliceAt].forEach(function(a5) {
                  a5.x += v;
                  a5.y += r2;
                });
              });
            }
            a3.prototype.drawDataLabels.apply(this, arguments);
          };
          f.prototype.pointAttribs = function(c) {
            var b = a3.prototype.pointAttribs.apply(this, arguments), f2 = this.options;
            this.chart.is3d() && !this.chart.styledMode && (b.stroke = f2.edgeColor || c.color || this.color, b["stroke-width"] = C(f2.edgeWidth, 1));
            return b;
          };
          f.prototype.translate = function() {
            a3.prototype.translate.apply(this, arguments);
            if (this.chart.is3d()) {
              var c = this, b = c.options, f2 = b.depth || 0, g = c.chart.options.chart.options3d, k = g.alpha, m2 = g.beta, r2 = b.stacking ? (b.stack || 0) * f2 : c._i * f2;
              r2 += f2 / 2;
              false !== b.grouping && (r2 = 0);
              c.data.forEach(function(a4) {
                var g2 = a4.shapeArgs;
                a4.shapeType = "arc3d";
                g2.z = r2;
                g2.depth = 0.75 * f2;
                g2.alpha = k;
                g2.beta = m2;
                g2.center = c.center;
                g2 = (g2.end + g2.start) / 2;
                a4.slicedTranslation = { translateX: Math.round(Math.cos(g2) * b.slicedOffset * Math.cos(k * x)), translateY: Math.round(Math.sin(g2) * b.slicedOffset * Math.cos(k * x)) };
              });
            }
          };
          f.prototype.drawTracker = function() {
            a3.prototype.drawTracker.apply(this, arguments);
            this.chart.is3d() && this.points.forEach(function(a4) {
              a4.graphic && ["out", "inn", "side1", "side2"].forEach(function(b) {
                a4.graphic && (a4.graphic[b].element.point = a4);
              });
            });
          };
          return f;
        }(y.seriesTypes.pie);
        a2(y.prototype, { pointClass: z });
        "";
        return y;
      });
      F(a, "Series/Pie3D/Pie3DComposition.js", [
        a["Series/Pie3D/Pie3DPoint.js"],
        a["Series/Pie3D/Pie3DSeries.js"],
        a["Core/Series/SeriesRegistry.js"]
      ], function(a2, z, y) {
        y.seriesTypes.pie.prototype.pointClass.prototype.haloPath = a2.prototype.haloPath;
        y.seriesTypes.pie = z;
      });
      F(a, "Series/Scatter3D/Scatter3DPoint.js", [a["Series/Scatter/ScatterSeries.js"], a["Core/Utilities.js"]], function(a2, z) {
        var x = this && this.__extends || function() {
          var a3 = function(m, r) {
            a3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a4, f) {
              a4.__proto__ = f;
            } || function(a4, f) {
              for (var k in f)
                f.hasOwnProperty(k) && (a4[k] = f[k]);
            };
            return a3(m, r);
          };
          return function(m, r) {
            function x2() {
              this.constructor = m;
            }
            a3(m, r);
            m.prototype = null === r ? Object.create(r) : (x2.prototype = r.prototype, new x2());
          };
        }(), D = z.defined;
        return function(a3) {
          function m() {
            var m2 = null !== a3 && a3.apply(this, arguments) || this;
            m2.options = void 0;
            m2.series = void 0;
            return m2;
          }
          x(m, a3);
          m.prototype.applyOptions = function() {
            a3.prototype.applyOptions.apply(this, arguments);
            D(this.z) || (this.z = 0);
            return this;
          };
          return m;
        }(a2.prototype.pointClass);
      });
      F(a, "Series/Scatter3D/Scatter3DSeries.js", [
        a["Core/Math3D.js"],
        a["Series/Scatter3D/Scatter3DPoint.js"],
        a["Series/Scatter/ScatterSeries.js"],
        a["Core/Series/SeriesRegistry.js"],
        a["Core/Utilities.js"]
      ], function(a2, z, y, D, m) {
        var x = this && this.__extends || function() {
          var a3 = function(f, c) {
            a3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(a4, c2) {
              a4.__proto__ = c2;
            } || function(a4, c2) {
              for (var b in c2)
                c2.hasOwnProperty(b) && (a4[b] = c2[b]);
            };
            return a3(f, c);
          };
          return function(f, c) {
            function b() {
              this.constructor = f;
            }
            a3(f, c);
            f.prototype = null === c ? Object.create(c) : (b.prototype = c.prototype, new b());
          };
        }(), r = a2.pointCameraDistance;
        a2 = m.extend;
        var C = m.merge;
        m = function(a3) {
          function f() {
            var c = null !== a3 && a3.apply(this, arguments) || this;
            c.data = void 0;
            c.options = void 0;
            c.points = void 0;
            return c;
          }
          x(f, a3);
          f.prototype.pointAttribs = function(c) {
            var b = a3.prototype.pointAttribs.apply(this, arguments);
            this.chart.is3d() && c && (b.zIndex = r(c, this.chart));
            return b;
          };
          f.defaultOptions = C(y.defaultOptions, { tooltip: { pointFormat: "x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>z: <b>{point.z}</b><br/>" } });
          return f;
        }(y);
        a2(m.prototype, {
          axisTypes: ["xAxis", "yAxis", "zAxis"],
          directTouch: true,
          parallelArrays: ["x", "y", "z"],
          pointArrayMap: ["x", "y", "z"],
          pointClass: z
        });
        D.registerSeriesType("scatter3d", m);
        "";
        return m;
      });
      F(a, "masters/highcharts-3d.src.js", [a["Core/Globals.js"], a["Core/Renderer/SVG/SVGRenderer3D.js"], a["Core/Chart/Chart3D.js"], a["Core/Axis/ZAxis.js"], a["Core/Axis/Axis3DComposition.js"], a["Series/Area3D/Area3DSeries.js"]], function(a2, z, y, D, m, F2) {
        z.compose(a2.SVGRenderer);
        y.compose(a2.Chart, a2.Fx);
        D.compose(a2.Chart);
        m.compose(a2.Axis, a2.Tick);
        F2.compose(a2.seriesTypes.area);
      });
    });
  }
});

// dep:highcharts_highcharts-3d
var highcharts_highcharts_3d_default = require_highcharts_3d();
export {
  highcharts_highcharts_3d_default as default
};
//# sourceMappingURL=highcharts_highcharts-3d.js.map
